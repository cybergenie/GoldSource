<?xml version="1.0"?>
<doc>
    <assembly>
        <name>STILSensors</name>
    </assembly>
    <members>
        <member name="T:STIL_NET.BufferManagement">
            <summary>Buffers Managed.</summary>
        </member>
        <member name="F:STIL_NET.BufferManagement.CurrentBufferIndex">
            <summary>Current buffer index for every type of even</summary>
        </member>
        <member name="F:STIL_NET.BufferManagement.CurrentPosIndex">
            <summary>Current position index in current buffer for every type of even</summary>
        </member>
        <member name="F:STIL_NET.BufferManagement.OldBufferIndex">
            <summary>Old buffer index for every type of even</summary>
        </member>
        <member name="F:STIL_NET.BufferManagement.OldPosIndex">
            <summary>Old position index in old buffer for every type of even</summary>
        </member>
        <member name="F:STIL_NET.BufferManagement.BufferLength">
            <summary>Buffer size</summary>
        </member>
        <member name="F:STIL_NET.BufferManagement.NumberOfBuffers">
            <summary>Number of buffer for each data type</summary>
        </member>
        <member name="F:STIL_NET.BufferManagement.NumberOfDataToReceive">
            <summary>Number of data to be received calculated from current and old buffer and position indexes</summary>
        </member>
        <member name="F:STIL_NET.BufferManagement.NumberOfBufferToReceive">
            <summary>Number of data to be received calculated from current and old buffer index</summary>
        </member>
        <member name="F:STIL_NET.BufferManagement.PtrArraySizeDataPerBuffer">
            <summary>Unmanaged array pointer containting the number of point acquired for each buffer. Value for an element of this array is -1 means number of point is buffer buffer length</summary>
        </member>
        <member name="F:STIL_NET.BufferManagement.PtrArrayEndTriggerPerBuffer">
            <summary>Unmanaged array pointer containting End trigger Flag for each buffer</summary>
        </member>
        <member name="F:STIL_NET.BufferManagement.ArraySizeDataPerBuffer">
            <summary>Managed array pointer containting the number of point acquired for each buffer. Value for an element of this array is -1 means number of point is buffer buffer length</summary>
        </member>
        <member name="F:STIL_NET.BufferManagement.ArrayEndTriggerPerBuffer">
            <summary>Unmanaged array pointer containting End trigger Flag for each buffer</summary>
        </member>
        <member name="F:STIL_NET.BufferManagement.EventTypeToManage">
             <summary>Event type currently used for acquisition</summary>
            See <see cref="T:STIL_NET.enAcqEventType"/> event.
        </member>
        <member name="M:STIL_NET.BufferManagement.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="M:STIL_NET.BufferManagement.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.BufferManagement.CreateUnmanagedMemory(System.Int32,System.Int32)">
            <summary>Create the unmanaged memory for Win32 / DLL interface with DLL_CHR</summary>
            <param name="p_iNumberOfBuffers">number of buffer</param>
            <param name="p_iNumberOfPoints">buffer length</param>
            <returns><see langword="true"/> if successfull, <see langword="false"/> in case of failure </returns>
        </member>
        <member name="M:STIL_NET.BufferManagement.ReleaseUnmanagedMemory">
            <summary>Release the unmanaged memory for Win32 / DLL interface with DLL_CHR</summary>
            <returns><see langword="true"/> if successfull, <see langword="false"/> in case of failure </returns>
        </member>
        <member name="M:STIL_NET.BufferManagement.Clear">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.BufferManagement.calculateNumberOfData">
            <summary>calculate the number of data for make copy</summary>
        </member>
        <member name="M:STIL_NET.BufferManagement.calculatePreviousIndex">
            <summary>calculate previous index for make copy</summary>
            <returns><see langword="true"/> if End trigger detected, <see langword="false"/> otherwise. </returns>
        </member>
        <member name="E:STIL_NET.BufferManagement.OnError">
            <summary>error event</summary>
        </member>
        <member name="T:STIL_NET.BufferManagement.ErrorHandler">
            <summary>delegate for error event</summary>
        </member>
        <member name="T:STIL_NET.cCommon">
            <summary>function used inside more class.It is used to manage buffers and unmanaged.</summary>
        </member>
        <member name="F:STIL_NET.cCommon.MAX_PATH">
            <summary>Max caracters for a path VC6/MFC compatibility</summary>
        </member>
        <member name="F:STIL_NET.cCommon.DLL_NAME">
            <summary>Dll name</summary>
        </member>
        <member name="F:STIL_NET.cCommon.MAX_CAR">
            <summary>Max caracters for a VC6/MFC compatibility</summary>
        </member>
        <member name="M:STIL_NET.cCommon.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.cCommon.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.cCommon.CreateSpectrumIntPtr(System.Int32,System.Int32,System.Int32)">
            <summary>create spectrum array to pointer</summary>
            <param name="NumberOfBuffers">number of buffer</param>
            <param name="BufferLength">buffer length</param>
            <param name="NumberOfPixels">number of pixels</param>
            <returns>pointer</returns>
        </member>
        <member name="M:STIL_NET.cCommon.ReleaseSpectrumIntPtr(System.IntPtr@,System.Int32,System.Int32,System.Int32)">
            <summary>release spectrum array to pointer</summary>
            <param name="ptrArray">pointer of buffer spectrum array</param>
            <param name="NumberOfBuffers">number of buffer</param>
            <param name="BufferLength">buffer length</param>
            <param name="NumberOfPixels">number of pixels</param>
        </member>
        <member name="M:STIL_NET.cCommon.GetSpectrumData(System.IntPtr,System.Int32,STIL_NET.BufferManagement,System.UInt32@)">
            <summary>copy float array to pointer</summary>
            <param name="ptrArray">pointer of buffer spectrum array</param>
            <param name="NumberOfPixels">number of pixels</param>
            <param name="bufferManagement">class for buffer management</param>
            <param name="bitsRate"> use to calculate the btis rate</param>
        </member>
        <member name="M:STIL_NET.cCommon.CreateShortArrayToIntPtr(System.Int32,System.Int32)">
            <summary>create short array to pointer</summary>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
            <returns>pointer</returns>
        </member>
        <member name="M:STIL_NET.cCommon.ShortArrayToIntPtr(System.Int16[]@,System.Int32)">
            <summary>short array to pointer array</summary>
            <param name="arrayShort">short array</param>
            <param name="arraySize">size of array</param>
            <returns>pointer array</returns>
        </member>
        <member name="M:STIL_NET.cCommon.IntPtrToShortArray(System.IntPtr,System.Int32)">
            <summary>pointer array to short array</summary>
            <param name="ptrArray">pointer array</param>
            <param name="arraySize">size of array</param>
            <returns>short array</returns>
        </member>
        <member name="M:STIL_NET.cCommon.ReleaseShortArrayOfIntPtr(System.IntPtr@,System.Int32,System.Int32)">
            <summary>release float array to pointer</summary>
            <param name="ptrArray">unmanaged pointer of data </param>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
        </member>
        <member name="M:STIL_NET.cCommon.CreateFloatArrayToIntPtr(System.Int32,System.Int32)">
            <summary>create float array to pointer</summary>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
            <returns>pointer</returns>
        </member>
        <member name="M:STIL_NET.cCommon.ReleaseFloatArrayOfIntPtr(System.IntPtr@,System.Int32,System.Int32)">
            <summary>release float array to pointer</summary>
            <param name="ptrArray">unmanaged pointer of data </param>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
        </member>
        <member name="M:STIL_NET.cCommon.GetFloatData(System.IntPtr,STIL_NET.BufferManagement,System.UInt32@)">
            <summary>copy float array to pointer</summary>
            <param name="ptrArray">unmanaged pointer of data </param>
            <param name="bufferManagement">class for buffer management</param>
            <param name="bitsRate"> use to calculate the bits rate</param>
        </member>
        <member name="M:STIL_NET.cCommon.IntPtrToFloatArray(System.IntPtr,System.Int32)">
            <summary>pointer array to float array</summary>
            <param name="ptrArray">pointer array</param>
            <param name="arraySize">size of array</param>
            <returns>float array</returns>
        </member>
        <member name="M:STIL_NET.cCommon.FloatArrayToIntPtr(System.Single[]@,System.Int32)">
            <summary>float array to pointer array</summary>
            <param name="arrayFloat">float array</param>
            <param name="arraySize">size of array</param>
            <returns>pointer array</returns>
        </member>
        <member name="M:STIL_NET.cCommon.StringArrayToIntPtr(System.Int32)">
            <summary>string array to pointer array</summary>
            <param name="iSize">size of array</param>
            <returns>pointer array</returns>
        </member>
        <member name="M:STIL_NET.cCommon.ConvertFloatToUint32(System.Single)">
            <summary>Convert a float to UInt32</summary>
            <param name="value">float value</param>
            <returns>UInt32 value</returns>
        </member>
        <member name="M:STIL_NET.cCommon.ConvertUint32ToFloat(System.UInt32)">
            <summary>Convert a UInt32 to float</summary>
            <param name="value">UInt32 value</param>
            <returns>float value</returns>
        </member>
        <member name="M:STIL_NET.cCommon.IntPtrToStringArray(System.IntPtr,System.Int32)">
            <summary>pointer array to string array</summary>
            <param name="ptrString">pointer of array</param>
            <param name="size">size of array</param>
            <returns>string array</returns>
        </member>
        <member name="M:STIL_NET.cCommon.FloatArrayToIntPtr(System.Single[]@,System.Int32,System.Int32)">
            <summary>float array to pointer array</summary>
            <param name="arrayFloat">float array</param>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
            <returns>pointer array</returns>
        </member>
        <member name="M:STIL_NET.cCommon.CreateInt32ArrayToIntPtr(System.Int32,System.Int32)">
            <summary>create long array to pointer</summary>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
            <returns>pointer</returns>
        </member>
        <member name="M:STIL_NET.cCommon.Int32ArrayToIntPtr(System.Int32[]@,System.Int32)">
            <summary>Int32 array to pointer array</summary>
            <param name="arrayInt32">Int 32 array</param>
            <param name="arraySize">size of array</param>
            <returns>pointer array</returns>
        </member>
        <member name="M:STIL_NET.cCommon.IntPtrToInt32Array(System.IntPtr,System.Int32)">
            <summary>pointer array to Int32 array</summary>
            <param name="ptrArray">pointer array</param>
            <param name="arraySize">size of array</param>
            <returns>short array</returns>
        </member>
        <member name="M:STIL_NET.cCommon.GetInt32Data(System.IntPtr,STIL_NET.BufferManagement)">
            <summary>copy Int32 array to pointer</summary>
            <param name="ptrArray">unmanaged pointer of data </param>
            <param name="bufferManagement">class for buffer management</param>
        </member>
        <member name="M:STIL_NET.cCommon.ReleaseInt32ArrayOfIntPtr(System.IntPtr@,System.Int32,System.Int32)">
            <summary>release int32 array to pointer</summary>
            <param name="ptrArray">unmanaged pointer of data </param>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
        </member>
        <member name="M:STIL_NET.cCommon.CreateByteArrayToIntPtr(System.Int32,System.Int32)">
            <summary>create byte array to pointer</summary>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
            <returns>pointer</returns>
        </member>
        <member name="M:STIL_NET.cCommon.ByteArrayToIntPtr(System.Byte[]@,System.Int32)">
            <summary>Byte array to pointer array</summary>
            <param name="arrayByte">Byte array</param>
            <param name="arraySize">size of array</param>
            <returns>pointer array</returns>
        </member>
        <member name="M:STIL_NET.cCommon.IntPtrToByteArray(System.IntPtr,System.Int32)">
            <summary>pointer array to byte array</summary>
            <param name="ptrArray">pointer array</param>
            <param name="arraySize">size of array</param>
            <returns>short array</returns>
        </member>
        <member name="M:STIL_NET.cCommon.GetByteData(System.IntPtr,STIL_NET.BufferManagement)">
            <summary>copy byte array to pointer</summary>
            <param name="ptrArray">unmanaged pointer of data </param>
            <param name="bufferManagement">class for buffer management</param>
        </member>
        <member name="M:STIL_NET.cCommon.ReleaseByteArrayOfIntPtr(System.IntPtr@,System.Int32,System.Int32)">
            <summary>release Byte array to pointer</summary>
            <param name="ptrArray">unmanaged pointer of data </param>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
        </member>
        <member name="T:STIL_NET.cNamedEvent">
             <summary>
             The cNamedEvent class is to suppliment .NET's event classes with the ability to span
             processes in both .NET and Win32 with the same event signaling capability.
            
             The cNamedEvent class object provides the ability to wait on, set, and
             reset a named event. The event can be created with manual or automatic reset,
             and is always created with an initial state of reset(false).
            
             The cNamedEvent class will not leave a handle open past any method
             call, so garbage collection is irrelevant.
            
             The cNamedEvent class defines both instance methods and static methods.
             The static methods require a name, where as the instance methods contain the
             name in the object instance already. The static methods are also limited to
             the configuration of auto reset and initially not signaled.
            
             The wait methods will wait on a single object, the named event, only. There
             is no multiple event support.
            
             Win32 security is a critical issue. This class does not support specifically
             identifying any security, other than the default process security context.
             This class is best suitable for processes run in the same security context,
             such as the desktop's interactive user account.
             </summary>
        </member>
        <member name="F:STIL_NET.cNamedEvent.INFINITE">
            <summary>Infinite timeout value</summary>
        </member>
        <member name="M:STIL_NET.cNamedEvent.#ctor">
            <summary>Create a cNamedEvent object with the name of the event, and assume auto reset with an initial state of reset.</summary>
        </member>
        <member name="M:STIL_NET.cNamedEvent.#ctor(System.Boolean)">
            <summary>Create a NamedEvent object with the name of the event and the auto reset property, assuming an initial state of reset.</summary>
        </member>
        <member name="M:STIL_NET.cNamedEvent.Finalize">
            <summary>Destructor of NamedEvent object for release unManaged Handle.</summary>
        </member>
        <member name="M:STIL_NET.cNamedEvent.Dispose">
            <summary>Free ressources used by NamedEvent object.</summary>
        </member>
        <member name="M:STIL_NET.cNamedEvent.Dispose(System.Boolean)">
            <summary>Free ressources used by NamedEvent object.</summary>
            <param name="disposing">Free managed ressources</param>
        </member>
        <member name="M:STIL_NET.cNamedEvent.Wait(System.Int32)">
            <summary>Wait for the event to signal to a maximum period of TimeoutInMs total milliseconds. Returns true if the event signaled, false if timeout occurred.</summary>
        </member>
        <member name="M:STIL_NET.cNamedEvent.Set">
            <summary>Set the single named event to a signaled state. The Wait() method will not block any thread as long as the event is in a signaled state.</summary>
        </member>
        <member name="M:STIL_NET.cNamedEvent.Reset">
            <summary>Reset the single named event to a non signaled state. The Wait() method will block any thread that enters it as long as the event is in a non signaled state.</summary>
        </member>
        <member name="P:STIL_NET.cNamedEvent.Handle">
            <summary>Property to get event handle.</summary>
        </member>
        <member name="T:STIL_NET.cMultipleNamedEvent">
            <summary>
            cMultipleNamedEvent
            </summary>
        </member>
        <member name="M:STIL_NET.cMultipleNamedEvent.WaitForMultipleObjects(System.UInt32,System.IntPtr[],System.Boolean,System.UInt32)">
            <summary>
            Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses.
            </summary>
            <param name="nCount">The number of object handles in the array pointed to by lpHandles. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS. This parameter cannot be zero.</param>
            <param name="handles">An array of object handles.</param>
            <param name="bWaitAll">If this parameter is TRUE, the function returns when the state of all objects in the lpHandles array is signaled. If FALSE, the function returns when the state of any one of the objects is set to signaled. In the latter case, the return value indicates the object whose state caused the function to return.</param>
            <param name="dwMilliseconds">The time-out interval, in milliseconds. If a nonzero value is specified, the function waits until the specified objects are signaled or the interval elapses. If dwMilliseconds is zero, the function does not enter a wait state if the specified objects are not signaled; it always returns immediately. If dwMilliseconds is INFINITE, the function will return only when the specified objects are signaled.</param>
            <returns>If the function succeeds, the return value indicates the event that caused the function to return. It can be one of the following values. (Note that WAIT_OBJECT_0 is defined as 0 and WAIT_ABANDONED_0 is defined as 0x00000080L.)</returns>
        </member>
        <member name="M:STIL_NET.cMultipleNamedEvent.#ctor(System.Int32)">
            <summary>Create a cMultipleNamedEvent object with the name of the event and the auto reset property, assuming an initial state of reset.</summary>
            <param name="numberOfEvent">Number of event</param>
        </member>
        <member name="M:STIL_NET.cMultipleNamedEvent.Finalize">
            <summary>Destructor of MultipleNamedEvent object for release unManaged Handle.</summary>
        </member>
        <member name="M:STIL_NET.cMultipleNamedEvent.Dispose">
            <summary>Free ressources used by MultipleNamedEvent object.</summary>
        </member>
        <member name="M:STIL_NET.cMultipleNamedEvent.Dispose(System.Boolean)">
            <summary>Free ressources used by MultipleNamedEvent object.</summary>
            <param name="disposing">Free managed ressources</param>
        </member>
        <member name="M:STIL_NET.cMultipleNamedEvent.Wait(System.Int32)">
            <summary>Wait for multiple the event to signal to a maximum period of TimeoutInMs total milliseconds. Returns true if the event signaled, false if timeout occurred.</summary>
            <param name="TimeoutInMs">The time-out interval, in milliseconds. If a nonzero value is specified, the function waits until the specified objects are signaled or the interval elapses. If dwMilliseconds is zero, the function does not enter a wait state if the specified objects are not signaled; it always returns immediately. If dwMilliseconds is INFINITE, the function will return only when the specified objects are signaled.</param>
            <returns>If the function succeeds, the return value indicates the event that caused the function to return. It can be one of the following values. (Note that WAIT_OBJECT_0 is defined as 0 and WAIT_ABANDONED_0 is defined as 0x00000080L.)</returns>
        </member>
        <member name="P:STIL_NET.cMultipleNamedEvent.Handle">
            <summary>Property to get event handle array.</summary>
        </member>
        <member name="T:STIL_NET.crypto_stil">
            <summary>
            Class of encryption (for access to administrative functions)
            </summary>
        </member>
        <member name="T:STIL_NET.crypto">
            <summary>
            classe de cryptage DES
            </summary>
        </member>
        <member name="M:STIL_NET.crypto.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.crypto.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.crypto.encrypt_des(System.String)">
            <summary>Data encryption function passed as arguments</summary>
            <param name="Str">String to encrypt</param>
            <returns>Returns the encrypted buffer as a byte array</returns>
        </member>
        <member name="M:STIL_NET.crypto.decrypt_des(System.Byte[])">
            <summary>Decryption function of the data passed as arguments</summary>
            <param name="Str">Buffer of bytes to decrypt</param>
            <returns>Returns the string corresponding to the decrypted buffer</returns>
        </member>
        <member name="E:STIL_NET.crypto.OnError">
            <summary>error event</summary>
        </member>
        <member name="T:STIL_NET.crypto.ErrorHandler">
            <summary>delagate for error event</summary>
        </member>
        <member name="M:STIL_NET.crypto_stil.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.crypto_stil.Finalize">
            <summary>Release</summary>
        </member>
        <member name="M:STIL_NET.crypto_stil.crypto_stil_OnError(System.Object,STIL_NET.cErrorEventArgs)">
            <summary>Callback if OnError is not null</summary>
        </member>
        <member name="E:STIL_NET.crypto_stil.OnError">
            <summary>error event</summary>
        </member>
        <member name="P:STIL_NET.crypto_stil.WindowsKey">
            <summary>Reading the key reference of the machine.</summary>
            <returns>The key reference</returns>
        </member>
        <member name="P:STIL_NET.crypto_stil.KeyCode">
            <summary>Code that allows STIL to authorize the unlocking of the administrative functions</summary>
        </member>
        <member name="P:STIL_NET.crypto_stil.IsUnlock">
            <summary><see langword="true"/> if key code is unlock.</summary>
        </member>
        <member name="T:STIL_NET.crypto_stil.ErrorHandler">
            <summary>delegate for error event</summary>
        </member>
        <member name="T:STIL_NET.cException">
            <summary>
            Exception class
            </summary>
        </member>
        <member name="M:STIL_NET.cException.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.cException.ToString">
            <summary>Returns error description </summary>
            <returns>Error description</returns>
        </member>
        <member name="M:STIL_NET.cException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>This protected constructor is used for deserialization.</summary>
            <param name="info">contains all serialized object data on exception thrown</param>
            <param name="context">contains contextual information on source or destination</param>
        </member>
        <member name="M:STIL_NET.cException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>GetObjectData performs a custom serialization.</summary>
            <param name="info">contains all serialized object data on exception thrown</param>
            <param name="context">contains contextual information on source or destination</param>
        </member>
        <member name="P:STIL_NET.cException.ClassName">
            <summary>
            Property ClassName
            </summary>
        </member>
        <member name="P:STIL_NET.cException.FunctionName">
            <summary>
            Property ClassName
            </summary>
        </member>
        <member name="P:STIL_NET.cException.Detail">
            <summary>
            Property ClassName
            </summary>
        </member>
        <member name="P:STIL_NET.cException.ErrorType">
            <summary>
            Property ErrorType
            </summary>
        </member>
        <member name="P:STIL_NET.cException.ErrorDetail">
            <summary>
            Property ErrorDetail
            </summary>
        </member>
        <member name="T:STIL_NET.cErrorEventArgs">
            <summary>
            Class gathering error information 
            </summary>
        </member>
        <member name="F:STIL_NET.cErrorEventArgs.Exception">
            <summary>
            Inner exception
            </summary>
        </member>
        <member name="T:STIL_NET.cIhm">
            <summary>
            Class that allows access to certain controls with Invoke method
            </summary>
        </member>
        <member name="M:STIL_NET.cIhm.FuncChangeTrackBar(System.Windows.Forms.TrackBar,System.Int32,System.Boolean)">
            <summary>
            Function that changes the value of a ChangeTrackBar control.
            </summary>
            <param name="ctrl">ChangeTrackBar control</param>
            <param name="value">TrackBar value</param>
            <param name="enabled">Enabled value</param>
        </member>
        <member name="M:STIL_NET.cIhm.FuncChangeRadioButton(System.Windows.Forms.RadioButton,System.Boolean)">
            <summary>
            Function that changes the value of a RadioButton control.
            </summary>
            <param name="ctrl">RadioButton control</param>
            <param name="value">RadioButton value</param>
        </member>
        <member name="M:STIL_NET.cIhm.FuncChangeLabel(System.Windows.Forms.Label,System.Int32,System.String)">
            <summary>
            Function that changes the value of a Label control.
            </summary>
            <param name="ctrl">Label control</param>
            <param name="imageIndex">Index of image to change</param>
            <param name="text">Text to display</param>
        </member>
        <member name="M:STIL_NET.cIhm.FuncChangeButton(System.Windows.Forms.Button,System.Boolean)">
            <summary>
            Function that changes the value of a Button control.
            </summary>
            <param name="ctrl">Button control</param>
            <param name="enabled">Enabled value</param>
        </member>
        <member name="M:STIL_NET.cIhm.FuncChangeButtonImageIndex(System.Windows.Forms.Button,System.Int32)">
            <summary>
            Function that changes the value of a ButtonImage control.
            </summary>
            <param name="ctrl">Button control</param>
            <param name="imageIndex">Index of image to change</param>
        </member>
        <member name="M:STIL_NET.cIhm.FuncChangeTextBox(System.Windows.Forms.TextBox,System.String,System.Boolean)">
            <summary>
            Function that changes the value of a TextBox control.
            </summary>
            <param name="ctrl">TextBox control</param>
            <param name="str">Text to display</param>
            <param name="enabled">Enabled value</param>
        </member>
        <member name="M:STIL_NET.cIhm.FuncChangeGroupBox(System.Windows.Forms.GroupBox,System.Boolean)">
            <summary>
            Function that changes the value of a GroupBox control.
            </summary>
            <param name="ctrl">GroupBox control</param>
            <param name="enabled">Enabled value</param>
        </member>
        <member name="M:STIL_NET.cIhm.FuncChangePropertyGrid(System.Windows.Forms.PropertyGrid,System.Object)">
            <summary>
            Function that changes the value of a PropertyGrid control.
            </summary>
            <param name="ctrl">PropertyGrid control</param>
            <param name="obj">Object to analyse and display</param>
        </member>
        <member name="M:STIL_NET.cIhm.FuncChangeProgress(STIL_NET.ProgressIndicator,System.Boolean)">
            <summary>
            Function that changes the value of a Progress control.
            </summary>
            <param name="ctrl">Progress control</param>
            <param name="run"><see langword="true"/> to run progress animation.</param>
        </member>
        <member name="T:STIL_NET.cIhm.ChangeRadioButton">
            <summary>
            Delegated function that changes the value of a RadioButton control.
            </summary>
            <param name="ctrl">RadioButton control</param>
            <param name="value">RadioButton value</param>
        </member>
        <member name="T:STIL_NET.cIhm.ChangeLabel">
            <summary>
            Delegated function that changes the value of a Label control.
            </summary>
            <param name="ctrl">Label control</param>
            <param name="imageIndex">Index of image to change</param>
            <param name="text">Text to display</param>
        </member>
        <member name="T:STIL_NET.cIhm.ChangeButton">
            <summary>
            Delegated function that changes the value of a Button control.
            </summary>
            <param name="ctrl">Button control</param>
            <param name="enabled">Enabled value</param>
        </member>
        <member name="T:STIL_NET.cIhm.ChangeButtonImageIndex">
            <summary>
            Delegated function that changes the value of a ButtonImage control.
            </summary>
            <param name="ctrl">Button control</param>
            <param name="imageIndex">Index of image to change</param>
        </member>
        <member name="T:STIL_NET.cIhm.ChangeTextBox">
            <summary>
            Delegated function that changes the value of a TextBox control.
            </summary>
            <param name="ctrl">TextBox control</param>
            <param name="str">Text to display</param>
            <param name="enabled">Enabled value</param>
        </member>
        <member name="T:STIL_NET.cIhm.ChangeGroupBox">
            <summary>
            Delegated function that changes the value of a GroupBox control.
            </summary>
            <param name="ctrl">GroupBox control</param>
            <param name="enabled">Enabled value</param>
        </member>
        <member name="T:STIL_NET.cIhm.ChangeProgress">
            <summary>
            Delegated function that changes the value of a Progress control.
            </summary>
            <param name="ctrl">Progress control</param>
            <param name="run"><see langword="true"/> to run progress animation.</param>
        </member>
        <member name="T:STIL_NET.cIhm.ChangePropertyGrid">
            <summary>
            Delegated function that changes the value of a PropertyGrid control.
            </summary>
            <param name="ctrl">PropertyGrid control</param>
            <param name="obj">Object to analyse and display</param>
        </member>
        <member name="T:STIL_NET.cIhm.ChangeTrackBar">
            <summary>
            Delegated function that changes the value of a ChangeTrackBar control.
            </summary>
            <param name="ctrl">ChangeTrackBar control</param>
            <param name="value">TrackBar value</param>
            <param name="enabled">Enabled value</param>
        </member>
        <member name="T:STIL_NET.sensor">
            <summary>
            Class Sensor
            </summary>
            <summary>
            Class with DLL link importation
            </summary>
        </member>
        <member name="F:STIL_NET.sensor.m_update">
            <summary>Use for refresh data communication.</summary>
        </member>
        <member name="M:STIL_NET.sensor.Release">
            <summary>
            Release
            </summary>
        </member>
        <member name="M:STIL_NET.sensor.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sensor.SetUpdateEnabled(System.Boolean)">
            <summary>
            Force sensors controls to refresh all functions
            </summary>
            <param name="enabled"><see langword="true"/> to forcecontrols to refresh all functions.</param>
        </member>
        <member name="M:STIL_NET.sensor.Close">
            <summary>This function disconnects the sensor and removes it from the Sensor List.</summary>
        </member>
        <member name="M:STIL_NET.sensor.SendCommand(System.String)">
            <summary>This function allows sending a command to the device, just like in a terminal. The command text should conform precisely to the syntax defined in the sensor manual.</summary>
            <param name="command">A character string comprising the command to send</param>
            <returns>Sensor response</returns>
        </member>
        <member name="M:STIL_NET.sensor.SendFirmware(System.String,System.String,STIL_NET.sensor.CALLBACK_SEND_FILE)">
            <summary>Function Download the firmware to the sensor without saving it to the non-volatile memory..</summary>
            <param name="firmwareFile"> Name of firmware (*.xxx) to be downloaded. = NULL if we don't want to download the firmware.</param>
            <param name="additionalFile"> Name of additional file to be downloaded for the sensor.  = NULL if we don't want to download the menu file..</param>
            <param name="CallBackFct">Reply</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.SaveFirmware(System.String,System.String,STIL_NET.sensor.CALLBACK_SEND_FILE)">
            <summary>Function Save the firmware to the sensor and saving it to the non-volatile memory..</summary>
            <param name="firmwareFile"> Name of firmware (*.xxx) to be downloaded. = NULL if we don't want to download the firmware.</param>
            <param name="additionalFile"> Name of additional file to be downloaded for the sensor.  = NULL if we don't want to download the menu file..</param>
            <param name="CallBackFct">Reply</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.DownloadFile(System.String,System.String)">
            <summary>Function Load a file from the sensor and saving it to the local disk (factory function protected).</summary>
            <param name="sourceFileName"> Source filename.</param>
            <param name="destinationFileName"> Destination filename.</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.GetFtpNumberOfFiles(System.String,System.Int32@)">
            <summary>Function Get number of files avaialable(factory function protected).</summary>
            <param name="fileName">shearched file name (*.*).</param>
            <param name="nbFiles">number of files found.</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.GetFtpFileName(STIL_NET.cFileData@,System.Int32)">
            <summary>Function Get a file informations (factory function protected).</summary>
            <param name="fileData">file informations.</param>
            <param name="numFile">index of file.</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.RecenterEncoders(System.Boolean,System.Boolean,System.Boolean)">
            <summary>RecenterEncoders .</summary>
            <param name="Encoder1">Encoder 1</param>
            <param name="Encoder2">Encoder 2</param>
            <param name="Encoder3">Encoder 3</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.ReceiveConfig(System.String)">
            <summary>Function Receive a configuration from a file from the CHR.</summary>
            <param name="configFile">The name of a file comprising the default configuration for the sensor.</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.SendConfig(System.String)">
            <summary>Function Send a configuration from a file to the CHR.</summary>
            <param name="configFile">The name of a file comprising the default configuration for the sensor.</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.SaveCurrentConfiguration">
            <summary>Function Save the configuration of the specified CHR to the EEPROM.</summary>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.AcqFastDark(System.UInt16,System.Double)">
            <summary>This function updates the Dark signal for the current acquisition rate only. The Dark signal is not saved to the sensor non-volatile memory.</summary>
            <param name="average">Indicates the number of successive Dark-signal acquisition to be averaged.If set to 0, the default value is used (50)</param>
            <param name="influenceValue">Ponderation (in percent) of the new acquisition in the new calculated Dark signal:<br/><br/>
            new Dark = { InfluenceValue * Acquired Dark + (100 - InfluenceValue) * Previous Dark} / 100<br/>
            The default value is 100.
            </param>        
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.ReadSignal(STIL_NET.enSignalType,System.Double[]@)">
            <summary>Read raw and treated signals to the specified CHR, warning call NbrPixels to know the buffer size to set in parameters</summary>
            <param name="SignalType">Selects the type of the signal.</param>
            <param name="Signal">A buffer for receiving the signal (size=number of spectrometer pixels).</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.ReadSignal(STIL_NET.enSignalType,System.UInt16[]@,STIL_NET.enSignalType,System.UInt16[]@)">
            <summary>Read raw and treated signals to the specified CHR, warning call NbrPixels to know the buffer size to set in parameters</summary>
            <param name="FirstSignalType">Selects the type of the first signal.</param>
            <param name="FirstSignal">A buffer for receiving the first signal (size=number of spectrometer pixels).</param>
            <param name="SecondSignalType">Selects the type of the second signal.</param>
            <param name="SecondSignal">A buffer for receiving the second signal (same size).</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.GetRefractiveIndexFile(System.Int32@,System.String@,System.Double@,System.Double@,System.Double@)">
            <summary>Retreive the refractive index file currently used in the sensor.</summary>
            <param name="iRefractiveFileIndex">ID of the file currently used in the sensor</param>
            <param name="sDescription">Description of the refractive index file</param>
            <param name="fMin">Minimum refractive index value</param>
            <param name="fMax">Maximum refractive index value</param>
            <param name="fAvg">Average refractive index value</param>
        </member>
        <member name="M:STIL_NET.sensor.SetRefractiveIndexFile(System.Int32)">
            <summary>Specify which refractive index file the sensor must use.</summary>
            <param name="idFile">File identifier</param>
            <returns>Material description of the selected refractive index file</returns>
        </member>
        <member name="M:STIL_NET.sensor.GetDigitalOutput(System.Int32)">
            <summary>Gets the data configuration of one digital output element.</summary>
            <param name="DataIndex">Digital ouput index</param>
            <returns>Returns a <see cref="T:STIL_NET.enDigitalOutputChannel"/></returns>
        </member>
        <member name="M:STIL_NET.sensor.SetDigitalOutput(System.Int32,STIL_NET.enDigitalOutputChannel)">
            <summary>This function tells for each data item if it is transmitted or not, and if so – on which digital channel.</summary>
            <param name="DataIndex">Index for the digital output item</param>
            <param name="OutputChannel">Protocol list where data can be sent defined in <see cref="T:STIL_NET.enDigitalOutputChannel"/> enumeration</param>
            <remarks>It is possible to direct some or all of the data to a channel different from the one connected to the CHR.</remarks>
        </member>
        <member name="M:STIL_NET.sensor.StartSpectrumAcquisition(System.UInt16@,System.UInt16@)">
            <summary>Function to launch the acquisition of spectrum.</summary>
            <param name="FirstUsablePixel">First usable pixel in CCD pixel count</param>
            <param name="DataSize">Number of pixel to send starting from first usable pixel</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.StopSpectrumAcquisition">
            <summary>Stop function of the acquisition of spectrum.</summary>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.GetSpectrumAcquisitionData(System.UInt16[]@,System.UInt16,System.UInt16@,STIL_NET.enSpectrumAcquisitionResult@,System.Int32)">
            <summary>Get Spectrum Acquisition Data</summary>
            <param name="SpectrumBuffer">Spectrum buffer</param>
            <param name="DataSize">Number of data in spectrum buffer</param>
            <param name="Counter">Counter for spectrum buffer</param>
            <param name="SpectrumAcquisitionResult"><see cref="T:STIL_NET.enSpectrumAcquisitionResult"/>Spectrum acquisition result </param>
            <param name="TimeoutValue">Time to wait in millisecond before timeout error declaration <see cref="F:STIL_NET.enSpectrumAcquisitionResult.SPECTRUM_ACQUISITION_TIMEOUT"/></param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.GetLastWrittenBuffer(STIL_NET.enAcqEventType,System.Int32@,System.Int32@)">
            <summary>Get the index of the last point written to the current buffer during the acquisition which is currently in progress.</summary>
            <param name="EventType"> Acquisition Event Type</param>
            <param name="indexBuffer">Buffer number, if it is egal at -1 = no current acquisition.</param>
            <param name="indexPoint">Point number, if it is egal at -1 = no current acquisition.</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.GetLastWrittenBufferEx(STIL_NET.enAcqEventType,System.Int32@,STIL_NET.BufferManagement@)">
            <summary>Get the index of the last point written to the current buffer during the acquisition which is currently in progress.</summary>
            <param name="EventType"> Acquisition Event Type</param>
            <param name="indexBuffer">Buffer number, if it is egal at -1 = no current acquisition.</param>
            <param name="p_BufferManagement">Object responsible for buffer management.</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.GetLastWrittenPoint(System.Int32@)">
            <summary>Get the index of the last point written to the current buffer during the acquisition which is currently in progress.</summary>
            <param name="indexPoint">Point number, if it is egal at -1 = no current acquisition.</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.SendCalibration(System.UInt16,System.String)">
            <summary>
            Function Download of a calibration table into the sensor
            </summary>
            <param name="penID">ID of the pen selected</param>
            <param name="CalibrationFileName">LUT file name</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.UploadFile(System.String,System.String)">
            <summary>
            Function file upload to the sensor
            </summary>
            <param name="sourceFileName">Absolute file source path</param>
            <param name="destinationFileName">Destination file name</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="F:STIL_NET.sensor.paramMeasurement">
            <summary>Parameters for measurement wrapper Win32 / Net</summary>
        </member>
        <member name="F:STIL_NET.sensor.threadAcqMeasurement">
            <summary>Thread of progress </summary>
        </member>
        <member name="F:STIL_NET.sensor.isAcquisitionInProgress">
            <summary>the acquisition is in progress ?</summary>
        </member>
        <member name="M:STIL_NET.sensor.GetDigitalOutputDescription">
            <summary>Returns a string array representing the data description for each digital output channel (Counter, Thickness...)</summary>
            <remarks>Data description depends on the sensor device and the measurement mode</remarks>
            <returns>Array of string</returns>
        </member>
        <member name="M:STIL_NET.sensor._SetSensorModeAndDigitalOutput">
            <summary>function that configures the digital outputs according to the parameters chosen.</summary>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.StartAcquisition">
            <summary>Function Wait for trigger, then start acquisition.</summary>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.StopAcquisition">
            <summary>Function stop acquisition.</summary>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.SetFastProcessCallback(STIL_NET.CALLBACK_FAST_PROCESS)">
            <summary>Set Fast process callback for measurement acquisition. WARNING : the process time must be as small as possible</summary>
            <param name="CallBackFct">Reply</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.StartAcquisition_Measurement(STIL_NET.cAcqParamMeasurement)">
            <summary>Start measurement acquisition.</summary>
            <param name="Parameters">Structure of measurement parameters</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.StopAcquisition_Measurement">
            <summary>Function stop the current acquisition.</summary>
            <returns><see langword="true"/> if successfull, <see langword="false"/> in case of failure </returns>
        </member>
        <member name="M:STIL_NET.sensor.StartInternalThreadReadAcqMeasurement">
            <summary>Start the acquistion thread for the measurement</summary>
            <returns><see langword="true"/> if successfull, <see langword="false"/> in case of failure </returns>
        </member>
        <member name="M:STIL_NET.sensor.StopInternalThreadReadAcqMeasurement">
            <summary>Stop the acquistion thread for the data measurement.</summary>
        </member>
        <member name="M:STIL_NET.sensor._PrepareMultipleEvents">
            <summary>Prepare MultipleEvent Class.</summary>        
        </member>
        <member name="M:STIL_NET.sensor.ThreadReadAcquisition_Measurement(System.Object)">
            <summary>Acquisition process.</summary>        
        </member>
        <member name="M:STIL_NET.sensor.GetThicknessAcquisitionData(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetThicknessMeasurement"/></summary>
            <param name="Thickness">Reading the data Thickness</param>
            <param name="Distance1">Reading the data Distance1</param>
            <param name="Intensity1">Reading the data Intensity1</param>
            <param name="BaryCenter1">Reading the data BaryCenter1</param>
            <param name="Distance2">Reading the data Distance2</param>
            <param name="Intensity2">Reading the data Intensity2</param>
            <param name="BaryCenter2">Reading the data BaryCenter2</param>
            <param name="Status">Reading the data Status</param>
            <param name="Counter">Reading the data Counter</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.sensor.GetAltitudeAcquisitionData(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetAltitudeMeasurement"/></summary>
            <param name="Altitude">Reading the data Altitude</param>
            <param name="Intensity">Reading the data Intensity</param>
            <param name="Counter">Reading the data Counter&gt;</param>
            <param name="BaryCenter">Reading the data BaryCenter</param>
            <param name="Status">Reading the data Status</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetDepthAcquisitionData(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetDepthMeasurement"/></summary>
            <param name="Depth">Reading the data Depth</param>
            <param name="Intensity">Reading the data Intensity</param>
            <param name="Counter">Reading the data Counter&gt;</param>
            <param name="BaryCenter">Reading the data BaryCenter</param>
            <param name="Status">Reading the data Status</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetInterferometricThicknessAcquisitionData(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetInterferometricThickness"/></summary>
            <param name="Thickness1">Reading the data Thickness1</param>
            <param name="Thickness2">Reading the data Thickness2</param>
            <param name="Thickness3">Reading the data Thickness3</param>
            <param name="Quality1">Reading the data Quality1</param>
            <param name="Quality2">Reading the data Quality2</param>
            <param name="Quality3">Reading the data Quality3</param>
            <param name="Intensity">Reading the data Intensity</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetInterferometricThicknessSAWLIAcquisitionData(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetInterferometricThicknessSAWLI"/></summary>
            <param name="Thickness1">Reading the data Thickness1</param>
            <param name="Thickness2">Reading the data Thickness2</param>
            <param name="Thickness3">Reading the data Thickness3</param>
            <param name="Quality1">Reading the data Quality1</param>
            <param name="Quality2">Reading the data Quality2</param>
            <param name="Quality3">Reading the data Quality3</param>
            <param name="Intensity">Reading the data Intensity</param>
            <param name="Thickness">Reading the data Intensity</param>
            <param name="Status">Reading the data Status</param>
            <param name="Counter">Reading the data Counter</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetAutoAdaptativeData(System.Single[]@,System.UInt32@)">
            <summary>Read value of AutoAdaptativeData</summary>
            <param name="AutoAdaptative">Reading the data AutoAdaptativeData</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetEncoderData(System.UInt32[]@,System.UInt32[]@,System.UInt32[]@,System.UInt32@)">
            <summary>Read value of encoder</summary>
            <param name="Encoder1">Reading the data Encoder1</param>
            <param name="Encoder2">Reading the data Encoder2</param>
            <param name="Encoder3">Reading the data Encoder3</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedData_ChrDistance(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement"/></summary>
            <param name="Distance">Reading the data Distance</param>
            <param name="Intensity">Reading the data Intensity</param>
            <param name="Counter">Reading the data Counter&gt;</param>
            <param name="BaryCenter">Reading the data BaryCenter</param>
            <param name="Status">Reading the data Status</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedData_ChrThickness(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement"/></summary>
            <param name="Thickness">Reading the data Thickness</param>
            <param name="Distance1">Reading the data Distance1</param>
            <param name="Distance2">Reading the data Distance2&gt;</param>
            <param name="Status">Reading the data Status</param>
            <param name="Intensity1">Reading the data Intensity1</param>
            <param name="Intensity2">Reading the data Intensity2</param>
            <param name="BaryCenter1">Reading the data BaryCenter1</param>
            <param name="BaryCenter2">Reading the data BaryCenter2</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedData_CssDistance(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32[]@,System.UInt32[]@,System.UInt32[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement"/></summary>
            <param name="Distance">Reading the data Distance</param>
            <param name="AutoAdaptativeModeData">Reading the data AutoAdaptativeModeData</param>
            <param name="Intensity">Reading the data Intensity&gt;</param>
            <param name="BaryCenter">Reading the data BaryCenter</param>
            <param name="Status">Reading the data Status</param>
            <param name="Counter">Reading the data Counter</param>
            <param name="Encoder1">Reading the data Encoder1</param>
            <param name="Encoder2">Reading the data Encoder2</param>
            <param name="Encoder3">Reading the data Encoder3</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedData_CssThickness(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32[]@,System.UInt32[]@,System.UInt32[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement"/></summary>
            <param name="Thickness">Reading the data Thickness</param>
            <param name="Distance1">Reading the data Distance1</param>
            <param name="Distance2">Reading the data Distance2</param>
            <param name="AutoAdaptativeModeData">Reading the data AutoAdaptativeModeData</param>
            <param name="Intensity1">Reading the data Intensity1&gt;</param>
            <param name="Intensity2">Reading the data Intensity2</param>
            <param name="BaryCenter1">Reading the data BaryCenter1</param>
            <param name="BaryCenter2">Reading the data BaryCenter2</param>
            <param name="Status">Reading the data Status</param>
            <param name="Counter">Reading the data Counter</param>
            <param name="Encoder1">Reading the data Encoder1</param>
            <param name="Encoder2">Reading the data Encoder2</param>
            <param name="Encoder3">Reading the data Encoder3</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedData_SpsDistance(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32[]@,System.UInt32[]@,System.UInt32[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement"/></summary>
            <param name="Distance">Reading the data Distance</param>
            <param name="AutoAdaptativeModeData">Reading the data AutoAdaptativeModeData</param>
            <param name="Intensity">Reading the data Intensity&gt;</param>
            <param name="BaryCenter">Reading the data BaryCenter</param>
            <param name="Status">Reading the data Status</param>
            <param name="Counter">Reading the data Counter</param>
            <param name="Encoder1">Reading the data Encoder1</param>
            <param name="Encoder2">Reading the data Encoder2</param>
            <param name="Encoder3">Reading the data Encoder3</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedData_SpsThickness(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32[]@,System.UInt32[]@,System.UInt32[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement"/></summary>
            <param name="Thickness">Reading the data Thickness</param>
            <param name="Distance1">Reading the data Distance1</param>
            <param name="Distance2">Reading the data Distance2</param>
            <param name="AutoAdaptativeModeData">Reading the data AutoAdaptativeModeData</param>
            <param name="Intensity1">Reading the data Intensity1&gt;</param>
            <param name="Intensity2">Reading the data Intensity2</param>
            <param name="BaryCenter1">Reading the data BaryCenter1</param>
            <param name="BaryCenter2">Reading the data BaryCenter2</param>
            <param name="Status">Reading the data Status</param>
            <param name="Counter">Reading the data Counter</param>
            <param name="Encoder1">Reading the data Encoder1</param>
            <param name="Encoder2">Reading the data Encoder2</param>
            <param name="Encoder3">Reading the data Encoder3</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedData_SPSAlpha1Distance(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement"/></summary>
            <param name="Distance">Reading the data Distance</param>
            <param name="Intensity">Reading the data Intensity</param>
            <param name="Counter">Reading the data Counter</param>
            <param name="BaryCenter">Reading the data BaryCenter</param>
            <param name="Status">Reading the data Status&gt;</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedData_SPSAlpha1Thickness(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement"/></summary>
            <param name="Thickness">Reading the data Thickness</param>
            <param name="Distance1">Reading the data Distance1</param>
            <param name="Distance2">Reading the data Distance2</param>
            <param name="Counter">Reading the data Counter</param>
            <param name="Intensity1">Reading the data Intensity1&gt;</param>
            <param name="Intensity2">Reading the data Intensity2</param>
            <param name="BaryCenter1">Reading the data BaryCenter1</param>
            <param name="BaryCenter2">Reading the data BaryCenter2</param>
            <param name="Status">Reading the data Status</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedData_DuoDistance(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement"/></summary>
            <param name="Distance">Reading the data Distance</param>
            <param name="Intensity">Reading the data Intensity</param>
            <param name="Counter">Reading the data Counter</param>
            <param name="BaryCenter">Reading the data BaryCenter</param>
            <param name="Status">Reading the data Status&gt;</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedData_DuoThickness(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement"/></summary>
            <param name="Thickness">Reading the data Thickness</param>
            <param name="Distance1">Reading the data Distance1</param>
            <param name="Distance2">Reading the data Distance2</param>
            <param name="Counter">Reading the data Counter</param>
            <param name="Intensity1">Reading the data Intensity1&gt;</param>
            <param name="Intensity2">Reading the data Intensity2</param>
            <param name="BaryCenter1">Reading the data BaryCenter1</param>
            <param name="BaryCenter2">Reading the data BaryCenter2</param>
            <param name="Status">Reading the data Status</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedData_DuoSawliDistance(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement"/></summary>
            <param name="Distance">Reading the data Distance</param>
            <param name="Quality">Reading the data Quality</param>
            <param name="Intensity">Reading the data Intensity</param>
            <param name="Counter">Reading the data Counter</param>
            <param name="Status">Reading the data Status</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedData_DuoSawliThickness(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement"/></summary>
            <param name="Thickness1">Reading the data Thickness1</param>
            <param name="Thickness2">Reading the data Thickness2</param>
            <param name="Thickness3">Reading the data Thickness3</param>
            <param name="Quality1">Reading the data Quality1</param>
            <param name="Quality2">Reading the data Quality2</param>
            <param name="Quality3">Reading the data Quality3</param>
            <param name="Intensity">Reading the data Intensity</param>
            <param name="NbThickness">Reading the data NbThickness</param>
            <param name="Counter">Reading the data Counter</param>
            <param name="Status">Reading the data Status</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedData_Ruby(System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.Single[]@,System.UInt32@)">
            <summary>Read value of <see cref="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement"/></summary>
            <param name="Coordinate0">Reading the data Coordinate0</param>
            <param name="Coordinate1">Reading the data Coordinate1</param>
            <param name="Coordinate2">Reading the data Coordinate2</param>
            <param name="Delta_Coordinate">Reading the data Delta_Coordinate</param>
            <param name="Spectral_Delta">Reading the data Spectral_Delta</param>
            <param name="Conformity">Reading the data Conformity</param>
            <param name="Counter">Reading the data Counter</param>
            <param name="Len">Number of data read</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="M:STIL_NET.sensor.GetTransmittedDataSpectrum(System.Int16[][]@)">
            <summary>Read value of spectrum. Beware to call this function straight after a data acquisition function such as GetXxxxxxxxxxxxxxAcquisitionData or GetTransmittedData_Yyyyyyyyyyyyyy</summary>
            <param name="Spectrum">Reading the data spectrum</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>        
        </member>
        <member name="E:STIL_NET.sensor.OnUnPlugged">
            <summary>Event called when unplugged sensor.</summary>
        </member>
        <member name="E:STIL_NET.sensor.OnProgress">
            <summary>Event called for progress process.</summary>
        </member>
        <member name="E:STIL_NET.sensor.OnMeasureModeChange">
            <summary>Event called when the measure mode has changed.</summary>
        </member>
        <member name="E:STIL_NET.sensor.AcquisitionStarted">
            <summary>Event called when acquisition process has started</summary>
        </member>
        <member name="E:STIL_NET.sensor.AcquisitionStarting">
            <summary>Event called just before acquisition process</summary>
        </member>
        <member name="E:STIL_NET.sensor.AcquisitionStopped">
            <summary>Event called when acquisition process is stopped</summary>
        </member>
        <member name="E:STIL_NET.sensor.AcquisitionStopping">
            <summary>Event called just before stopping acquisition</summary>
        </member>
        <member name="E:STIL_NET.sensor.OnLedAutoChange">
            <summary>Event called when the led auto has changed.</summary>
        </member>
        <member name="E:STIL_NET.sensor.OnLedBrightnessChange">
            <summary>Event called when the led brightness has changed.</summary>
        </member>
        <member name="E:STIL_NET.sensor.OnOpticalPenChange">
            <summary>Event called when the optical pen has changed.</summary>
        </member>
        <member name="E:STIL_NET.sensor.OnScanRateChange">
            <summary>Event called when the scan rate has changed.</summary>
        </member>
        <member name="E:STIL_NET.sensor.OnFreeFrequencyChange">
            <summary>Event called when the free frequency has changed.</summary>
        </member>
        <member name="E:STIL_NET.sensor.OnDigitalOutputChange">
            <summary>Event called when the digital output has changed.</summary>
        </member>
        <member name="P:STIL_NET.sensor.SensorConnectionType">
            <summary>Get the connection type set during the object constructor.</summary>
        </member>
        <member name="P:STIL_NET.sensor.LedAuto">
            <summary>Auto-adaptive LED mode(CCS sensors only )</summary>
        </member>
        <member name="P:STIL_NET.sensor.SensorName">
            <summary>This function gets the name attributed to the specified sensor.</summary>
        </member>
        <member name="P:STIL_NET.sensor.FirmwareVersion">
            <summary>Version number of the sensor software.</summary>
        </member>
        <member name="P:STIL_NET.sensor.StateUploadDll">
            <summary>State of upload DLL.</summary>
        </member>
        <member name="P:STIL_NET.sensor.StateUploadFirmware">
            <summary>State of upload Firmware.</summary>
        </member>
        <member name="P:STIL_NET.sensor.StateUploadMenu">
            <summary>State of upload Menu.</summary>
        </member>
        <member name="P:STIL_NET.sensor.Language">
            <summary>Language of the sensor software.</summary>
        </member>
        <member name="P:STIL_NET.sensor.SensorType">
            <summary>Type of the opened sensor.</summary>
        </member>
        <member name="P:STIL_NET.sensor.ConnectionType">
            <summary>Connection type of a device.</summary>
        </member>
        <member name="P:STIL_NET.sensor.MaxPenNumber">
            <summary>Max number of pen.</summary>
        </member>
        <member name="P:STIL_NET.sensor.PenList">
            <summary>The list of the available optical pens for the specified sensor, in other terms the list of the calibration tables.</summary>
        </member>
        <member name="P:STIL_NET.sensor.MaxNumberOfTransmittedData">
            <summary>Number of available data items, which depends on controller type.</summary>
        </member>
        <member name="P:STIL_NET.sensor.FullScale">
            <summary>Measuring range of the currently selected pen.</summary>
        </member>
        <member name="P:STIL_NET.sensor.RateList">
            <summary>
            List of pre-set frequencies (rates) of the specified sensor. The list depends on the sensor type.</summary>        
        </member>
        <member name="P:STIL_NET.sensor.Status">
            <summary>
            This function returns the current state of the SENSOR.  
            Please note that this state should not be confused with the State data item available on some sensors models.
            </summary>
        </member>
        <member name="P:STIL_NET.sensor.SerialNumber">
            <summary>Serial number of the CHR. </summary>       
        </member>
        <member name="P:STIL_NET.sensor.AnalogOutput">
            <summary>
            This property attributes a data item to one of the analog outputs and sets data values corresponding to 0 V and 10 V output.
            </summary>
        </member>
        <member name="P:STIL_NET.sensor.AcqDark">
            <summary>
            This function updates the Dark signal of the sensor at all acquisition rates and informs on the
            minimum authorized acquisition rate. (If some rates are not authorized, see the sensor Operating
            and Maintenance Manual for methods for cleaning the fiber optics). The dark signals are saved in
            the sensor non-volatile memory.
            </summary>
            <remarks>
            The execution of this function may take a long time (of the order of one minute for some
            sensor types). No other commands should be sent to the sensor before processing of this command is done.
            </remarks>
            <returns>Minimum authorized fixed acquisition rate</returns>
        </member>
        <member name="P:STIL_NET.sensor.OpticalPen">
            <summary>
            Optical pen selection, in other terms, it selects the calibration table number in the sensor
            </summary>
        </member>
        <member name="P:STIL_NET.sensor.ScanRate">
             <summary>Fixed acquisition rate identifier for a list of values defined in <see cref="T:STIL_NET.enFixedScanRates"/> enumeration</summary>
            <remarks>For free frequency, use the <see cref="P:STIL_NET.sensor.FreeFrequency"/> parameter</remarks>
        </member>
        <member name="P:STIL_NET.sensor.Averaging">
            <summary>Averaging factor</summary>
        </member>
        <member name="P:STIL_NET.sensor.RefractiveIndex">
             <summary>Sets the sample refractive index.</summary>
            <remarks>This parameter is required for measuring in thickness mode.</remarks>
        </member>
        <member name="P:STIL_NET.sensor.DistanceDetectionThreshold">
            <summary>Sets the Distance-mode threshold on peak height below which the peak will not be detected.</summary>
            <remarks>Note that for Thickness-mode the <see cref="P:STIL_NET.sensorCCS.ThicknessDetectionThreshold"/> should be used.</remarks>
        </member>
        <member name="P:STIL_NET.sensor.FreeFrequency">
            <summary>Used to specify the custom scan rate of the sensor. If you set this property, make sure <see cref="P:STIL_NET.sensor.ScanRate"/> is free</summary>
        </member>
        <member name="P:STIL_NET.sensor.CcdMaxPixels">
            <summary>This function returns the maximum number of pixels of the sensor.</summary>
        </member>
        <member name="P:STIL_NET.sensor.LockKeyboard">
            <summary>This function returns the maximum number of pixels of the sensor.</summary>
        </member>
        <member name="P:STIL_NET.sensor.SerialPort">
            <summary>This function gets the identifier of the PC COM PORT connected to the sensor.</summary>
            <returns>In case of success the function returns the PORT COM identifier, otherwise it returns 0</returns>
        </member>
        <member name="P:STIL_NET.sensor.BaudRate">
            <summary>This function gets the current Baud rate of the serial port connected to the specified sensor.</summary>
            <returns>In case of success the function returns the baud rate, otherwise it returns 0</returns>
        </member>
        <member name="P:STIL_NET.sensor.IPAddress">
            <summary>Get the sensor IP Address for Ethernet connection.</summary>
        </member>
        <member name="P:STIL_NET.sensor.WhiteRefCuttingValue">
            <summary>Reads white ref cutting value</summary>
        </member>
        <member name="P:STIL_NET.sensor.WhiteRefMaxThreshold">
            <summary>Reads white ref max threshold</summary>
        </member>
        <member name="P:STIL_NET.sensor.WhiteRefMinThreshold">
            <summary>Reads white ref min threshold</summary>
        </member>
        <member name="P:STIL_NET.sensor.WhiteRefAvg">
            <summary>Reads white ref average</summary>
        </member>
        <member name="P:STIL_NET.sensor.WhiteRefFrq">
            <summary>Reads white ref frequency</summary>
        </member>
        <member name="P:STIL_NET.sensor.WhiteRefNormaMinThreshold">
            <summary>Reads white ref normalization min threshold</summary>
        </member>
        <member name="P:STIL_NET.sensor.WhiteRefNormaMaxThreshold">
            <summary>Reads white ref normalization max threshold</summary>
        </member>
        <member name="P:STIL_NET.sensor.WhiteRefNormaAvg">
            <summary>Reads white ref normalization average</summary>
        </member>
        <member name="P:STIL_NET.sensor.WhiteRefNormaFrq">
            <summary>Reads white ref normalization frequency</summary>
        </member>
        <member name="P:STIL_NET.sensor.AutoWhiteRef">
            <summary>Get/Set AutoWhiteRef status</summary>
        </member>
        <member name="P:STIL_NET.sensor.BlackAveraging">
            <summary>Get/Set AutoWhiteRef status</summary>
        </member>
        <member name="P:STIL_NET.sensor.BlackMaxThreshold">
            <summary>Get/Set AutoWhiteRef status</summary>
        </member>
        <member name="P:STIL_NET.sensor.ExposureTimeDW">
            <summary>Get/Set CHR current exposure time in microseconds</summary>
        </member>
        <member name="P:STIL_NET.sensor.ExposureTime">
            <summary>Get/Set CHR current exposure time in microseconds</summary>
        </member>
        <member name="P:STIL_NET.sensor.SmoothingValue">
            <summary>Get/Set current smoothing index.</summary>
        </member>
        <member name="P:STIL_NET.sensor.AcqBlack">
            <summary>Acquire black signal at all frequencies, and returns the minimum frequency.</summary>
        </member>
        <member name="P:STIL_NET.sensor.FirstCCDPixelRead">
            <summary>Get the first pixel readed by the CDD.</summary>
        </member>
        <member name="P:STIL_NET.sensor.FullScaleInterferometric">
            <summary>Get the measuring range of the current optical pen in interferometric mode of a connected device.</summary>
        </member>
        <member name="P:STIL_NET.sensor.LastWhiteRefState">
            <summary>Get the measuring range of the current optical pen in interferometric mode of a connected device.</summary>
        </member>
        <member name="P:STIL_NET.sensor.MaxCalibrationFileValue">
            <summary>Get the maximum value of the calibration file.</summary>
        </member>
        <member name="P:STIL_NET.sensor.DoubleFrequencyParameters">
            <summary>This Function to gets or sets the double frequency mode.</summary>
        </member>
        <member name="P:STIL_NET.sensor.MeasureDuration">
            <summary>
            This function get the duration of a sequence of measurements
            </summary>
        </member>
        <member name="P:STIL_NET.sensor.SensorID">
            <summary>property of the sensor ID</summary>
        </member>
        <member name="P:STIL_NET.sensor.MaxThickness">
            <summary>
            This function Gets or Sets the maximal value (threshold)  of  thickness to detect
            </summary>
        </member>
        <member name="P:STIL_NET.sensor.MinThickness">
            <summary>
            This function Gets or Sets the minimal value (threshold)  of  thickness to detect
            </summary>
        </member>
        <member name="P:STIL_NET.sensor.NumberOfLayers">
            <summary>
            This function gets or sets the number of thicknesses to transmit in the SAWLI/Thickness mode
            </summary>
        </member>
        <member name="P:STIL_NET.sensor.MultiplexChannelNumber">
            <summary>
            Returns the number of channel available on the device
            </summary>
        </member>
        <member name="P:STIL_NET.sensor.MultiplexChannel">
            <summary>
            Property set or get the chanel ID used by the sensor.
            </summary>
        </member>
        <member name="P:STIL_NET.sensor.MinDarkFrequency">
            <summary>
            Min dark frequency ID
            </summary>
        </member>
        <member name="P:STIL_NET.sensor.MeasureMode">
            <summary>Selects the measuring mode of the sensor defined in <see cref="T:STIL_NET.enMeasureMode"/></summary>
        </member>
        <member name="P:STIL_NET.sensor.LedBrightness">
            <summary>LED brightness level (0 to 100)</summary>
            <seealso cref="P:STIL_NET.sensor.LedAuto"/>
        </member>
        <member name="P:STIL_NET.sensor.SpectrumMode">
            <summary>SpectrumMode</summary>        
        </member>
        <member name="P:STIL_NET.sensor.DigitalOutputFormat">
            <summary>Current digital outpout format (ASCII/BIN).</summary>
            <seealso cref="T:STIL_NET.enDigitalOutputFormat"/>
        </member>
        <member name="P:STIL_NET.sensor.SpectralCalibration">
            <summary>Spectral calibration coeficients.</summary>
        </member>
        <member name="P:STIL_NET.sensor.SpectralRefractivesIndexes">
            <summary>Spectral refractives indexes.</summary>
        </member>
        <member name="P:STIL_NET.sensor.TransmittedDigitalOutput">
            <summary>This function gets or set the data configuration of the digital output definied in <see langword="enDigitalOutputChannel"/> enumeration.</summary>        
        </member>
        <member name="P:STIL_NET.sensor.UsbDeviceList">
            <summary>This property returns the names of all available CCS type USB devices, and indicates for each device if it has already been added to the sensor list or not.</summary>        
        </member>
        <member name="P:STIL_NET.sensor.WhiteRefAveraging">
            <summary>Reads white ref averaging factor.</summary>
        </member>
        <member name="P:STIL_NET.sensor.NumberMaxPixels">
            <summary>Reads white ref NbrMaxPixels factor.</summary>
        </member>
        <member name="P:STIL_NET.sensor.InvertDistance">
            <summary>Property to tip up deph and altitude</summary>
        </member>
        <member name="P:STIL_NET.sensor.FirstPixel">
             <summary>
            Set/Get First pixel
             </summary>
        </member>
        <member name="P:STIL_NET.sensor.Sampling">
             <summary>
            Set/Get sampling rate for spectrum
             </summary>
        </member>
        <member name="P:STIL_NET.sensor.NumberOfPixels">
             <summary>
            Set/Get the number of pixels to define a spectral.
             </summary>
        </member>
        <member name="P:STIL_NET.sensor.RealTimeSignalType">
             <summary>
            Set/Get the type of signal exported (raw or processed), the processed signal is equivalent to the reflectance of the sample.
             </summary>
        </member>
        <member name="E:STIL_NET.sensor.OnError">
            <summary>Error event</summary>
        </member>
        <member name="E:STIL_NET.sensor.OnEventMeasurement">
            <summary>Event for end of measurement.</summary>
        </member>
        <member name="P:STIL_NET.sensor.IsAcquisitionInProgress">
            <summary>Property that indicates whether the acquisition is being.</summary>
        </member>
        <member name="T:STIL_NET.sensor.ProgressHandler">
            <summary>Progress bar delegate declaration.</summary>
        </member>
        <member name="T:STIL_NET.sensor.CALLBACK_SEND_FILE">
            <summary>Send file delegate.</summary>
        </member>
        <member name="T:STIL_NET.sensor.ErrorHandler">
            <summary>Delagate for error event</summary>
        </member>
        <member name="T:STIL_NET.sensor.enSensorAcquisitionEvent">
            <summary>Events list used to identify type of event.</summary>
        </member>
        <member name="F:STIL_NET.sensor.enSensorAcquisitionEvent.EV_ACQUIRE_N_POINTS">
            <summary>Event acquisition n points</summary>
        </member>
        <member name="F:STIL_NET.sensor.enSensorAcquisitionEvent.EV_END_BUFFER">
            <summary>Event end buffer</summary>
        </member>
        <member name="F:STIL_NET.sensor.enSensorAcquisitionEvent.EV_END_MEASUREMENT">
            <summary>Event end measurement</summary>
        </member>
        <member name="F:STIL_NET.sensor.enSensorAcquisitionEvent.EV_END_ACQUIRE">
            <summary>Event end acquisitiontion</summary>
        </member>
        <member name="F:STIL_NET.sensor.enSensorAcquisitionEvent.EV_STARTING_ACQUISITION">
            <summary>Event starting acquisition</summary>
        </member>
        <member name="F:STIL_NET.sensor.enSensorAcquisitionEvent.EV_END_TRIGGER_TRN_OR_TRS">
            <summary>Event to end trigger on TRS or TRN Trigger acquisition mode</summary>
        </member>
        <member name="F:STIL_NET.sensor.enSensorAcquisitionEvent.EV_END_ACQUIRE_TIMEOUT">
            <summary>Event end acquisitiontion by timeout</summary>
        </member>
        <member name="T:STIL_NET.sensor.OnEventMeasurementHandler">
            <summary>Callback Event for end of measurement.</summary>
        </member>
        <member name="T:STIL_NET.sensorCCS">
            <summary>Class cSensorCCS</summary>
        </member>
        <member name="M:STIL_NET.sensorCCS.#ctor(System.UInt16,STIL_NET.enDigitalOutputChannel,STIL_NET.sensorManager)">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorCCS.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.sensorCCS.SetDigitalOutput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function tells for each data item if it is transmitted or not
            Call this function when <see cref="P:STIL_NET.sensor.MeasureMode"/> is in distance mode
            </summary>
            <param name="bDistance"><see langword="true"/> if distance is sent</param>
            <param name="bIntensity"><see langword="true"/> if Intensity is sent</param>
            <param name="bBarycenter"><see langword="true"/> if barycenter is sent</param>
            <param name="bState"><see langword="true"/> if State is sent</param>
            <param name="bCounter"><see langword="true"/> if counter is sent</param>
            <param name="bEncoder1"><see langword="true"/> if encoder1 is sent</param>
            <param name="bEncoder2"><see langword="true"/> if encoder2 is sent</param>
            <param name="bEncoder3"><see langword="true"/> if encoder3 is sent</param>
            <param name="bAutoAdapative"><see langword="true"/> if bAutoAdapative is sent</param>
        </member>
        <member name="M:STIL_NET.sensorCCS.SetDigitalOutput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function tells for each data item if it is transmitted or not
            Call this function when <see cref="P:STIL_NET.sensor.MeasureMode"/> is in thickness mode
            </summary>
            <param name="bThickness"><see langword="true"/> if thickness is transmitted</param>
            <param name="bDistance1"><see langword="true"/> if bDistance1 is transmitted</param>
            <param name="bDistance2"><see langword="true"/> if bDistance2 is transmitted</param>
            <param name="bIntensity1"><see langword="true"/> if bIntensity1 is transmitted</param>
            <param name="bIntensity2"><see langword="true"/> if bIntensity2 is transmitted</param>
            <param name="bBarycenter1"><see langword="true"/> if bBarycenter1 is transmitted</param>
            <param name="bBarycenter2"><see langword="true"/> if bBarycenter2 is transmitted</param>
            <param name="bState"><see langword="true"/> if bState is transmitted</param>
            <param name="bCounter"><see langword="true"/> if bCounter is transmitted</param>
            <param name="bEncoder1"><see langword="true"/> if bEncoder1 is transmitted</param>
            <param name="bEncoder2"><see langword="true"/> if bEncoder2 is transmitted</param>
            <param name="bEncoder3"><see langword="true"/> if bEncoder3 is transmitted</param>
            <param name="bAutoAdapative"><see langword="true"/> if bAutoAdapative is transmitted</param>
        </member>
        <member name="E:STIL_NET.sensorCCS.OnScanRateChange">
            <summary>Event called when the scan rate pen has changed.</summary>
        </member>
        <member name="P:STIL_NET.sensorCCS.AutoRateMode">
            <summary>Get/Set to detect if the CCS is in automatic frequency mode(CCS only)</summary>
        </member>
        <member name="P:STIL_NET.sensorCCS.AutoDarkMode">
            <summary>This function gets or sets automatic-dark activation flag (CCS sensors only ).</summary>
        </member>
        <member name="P:STIL_NET.sensorCCS.AutoModeThreshold">
            <summary>This function gets or sets automatic dark mode (Auto LED et Auto Rate) (CCS sensors only ).</summary>
        </member>
        <member name="P:STIL_NET.sensorCCS.BaryCenterScale">
            <summary>The scale for the digital output of the Barycenter data item in both Distance mode and Thickness mode (CCS sensors only ).</summary>
        </member>
        <member name="P:STIL_NET.sensorCCS.BaryCenterRef">
            <summary>The offset for the digital output of the Barycenter data item in both Distance mode and Thickness mode (CCS sensors only ).</summary>
        </member>
        <member name="P:STIL_NET.sensorCCS.HoldLastValue">
            <summary>This function determines the behavior of the sensor in case one or more measurements fail.</summary>
            <remarks>If <see langword="NbPoints"/> is null, all data items are set to 0.
            <br/><br/>
            If <see langword="NbPoints"/> is positive, the sensor “holds” the last valid
            measured values (CCS sensors only).</remarks>
        </member>
        <member name="P:STIL_NET.sensorCCS.LedAuto">
            <summary>
            Auto-adaptive LED mode(CCS sensors only )
            If true, <see cref="P:STIL_NET.sensor.LedBrightness"/> will be unavailable
            </summary>
            <seealso cref="P:STIL_NET.sensor.LedBrightness"/>
        </member>
        <member name="P:STIL_NET.sensorCCS.LedType">
            <summary>Led type selected. Source type can be either Internal LED or External source</summary>
        </member>
        <member name="P:STIL_NET.sensorCCS.LevelEdgeFlag">
            <summary>property for active edge (or active state) for trigger signals.</summary>
        </member>
        <member name="P:STIL_NET.sensorCCS.NonExistantSecondPeakHandling">
            <summary>Led type selected. Source type can be either Internal LED or External source</summary>
        </member>
        <member name="P:STIL_NET.sensorCCS.PeakSelectionMode">
            <summary>This function determines the way the sensor selects the peak in Distance mode in case two peaks are present (CCS sensors only ).</summary>
        </member>
        <member name="P:STIL_NET.sensorCCS.ThicknessDetectionThreshold">
            <summary>Current detection thresholds for thickness mode.</summary>
        </member>
        <member name="P:STIL_NET.sensorCCS.FirstUsablePixel">
            <summary>First Usable Pixel</summary>
        </member>
        <member name="P:STIL_NET.sensorCCS.NumberOfUsablePixels">
            <summary>Number Of Usable Pixels</summary>
        </member>
        <member name="T:STIL_NET.sensorCCSInitial">
            <summary>Class sensorCCSInitial</summary>
        </member>
        <member name="M:STIL_NET.sensorCCSInitial.#ctor(System.UInt16,STIL_NET.enDigitalOutputChannel,STIL_NET.sensorManager)">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorCCSInitial.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="P:STIL_NET.sensorCCSInitial.ScanRate">
             <summary>Fixed acquisition rate identifier for a list of values defined in <see cref="T:STIL_NET.enFixedScanRates_CCS_INITIAL"/> enumeration</summary>
            <remarks>For free frequency, use the <see cref="P:STIL_NET.sensor.FreeFrequency"/> parameter</remarks>
        </member>
        <member name="T:STIL_NET.sensorCCSOptima">
            <summary>Class cSensorCCSOptima</summary>
        </member>
        <member name="M:STIL_NET.sensorCCSOptima.#ctor(System.UInt16,STIL_NET.enDigitalOutputChannel,STIL_NET.sensorManager)">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorCCSOptima.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="P:STIL_NET.sensorCCSOptima.ScanRate">
             <summary>Fixed acquisition rate identifier for a list of values defined in <see cref="T:STIL_NET.enFixedScanRates_CCS_OPTIMA"/> enumeration</summary>
            <remarks>For free frequency, use the <see cref="P:STIL_NET.sensor.FreeFrequency"/> parameter</remarks>
        </member>
        <member name="T:STIL_NET.sensorCCSOptimaPlus">
            <summary>Class cSensorCCSOptimaPlus</summary>
        </member>
        <member name="M:STIL_NET.sensorCCSOptimaPlus.#ctor(System.UInt16,STIL_NET.enDigitalOutputChannel,STIL_NET.sensorManager)">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorCCSOptimaPlus.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="P:STIL_NET.sensorCCSOptimaPlus.ScanRate">
             <summary>Fixed acquisition rate identifier for a list of values defined in <see cref="T:STIL_NET.enFixedScanRates_CCS_OPTIMA_PLUS"/> enumeration</summary>
            <remarks>For free frequency, use the <see cref="P:STIL_NET.sensor.FreeFrequency"/> parameter</remarks>
        </member>
        <member name="T:STIL_NET.sensorCCSExtrema">
            <summary>Class cSensorCCSExtrema</summary>
        </member>
        <member name="M:STIL_NET.sensorCCSExtrema.#ctor(System.UInt16,STIL_NET.enDigitalOutputChannel,STIL_NET.sensorManager)">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorCCSExtrema.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="P:STIL_NET.sensorCCSExtrema.ScanRate">
             <summary>Fixed acquisition rate identifier for a list of values defined in <see cref="T:STIL_NET.enFixedScanRates_CCS_EXTREMA"/> enumeration</summary>
            <remarks>For free frequency, use the <see cref="P:STIL_NET.sensor.FreeFrequency"/> parameter</remarks>
        </member>
        <member name="T:STIL_NET.sensorCCSPrima">
            <summary>Class sensorCCSPrima</summary>
        </member>
        <member name="M:STIL_NET.sensorCCSPrima.#ctor(System.UInt16,STIL_NET.enDigitalOutputChannel,STIL_NET.sensorManager)">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorCCSPrima.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.sensorCCSPrima.AcqMultiplexDark(System.Int32[]@)">
            <summary>Acquire dark signal for all CCS PRIMA multiplex channels. (in contrast with the MCHR_AcqDark which acquires ans saves the Dark for the current channel only).</summary>
            <param name="arrayMinFreq">Array of integer allocated by this function that with be filled by the DLL with the minimum frequencies allowed for each channels.</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="P:STIL_NET.sensorCCSPrima.ScanRate">
             <summary>Fixed acquisition rate identifier for a list of values defined in <see cref="T:STIL_NET.enFixedScanRates_CCS_PRIMA"/> enumeration</summary>
            <remarks>For free frequency, use the <see cref="P:STIL_NET.sensor.FreeFrequency"/> parameter</remarks>
        </member>
        <member name="T:STIL_NET.sensorCCSUltima">
            <summary>Class cSensorCCSUltima</summary>
        </member>
        <member name="M:STIL_NET.sensorCCSUltima.#ctor(System.UInt16,STIL_NET.enDigitalOutputChannel,STIL_NET.sensorManager)">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorCCSUltima.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="E:STIL_NET.sensorCCSUltima.OnScanRateChange">
            <summary>Event called when the scan rate pen has changed.</summary>
        </member>
        <member name="P:STIL_NET.sensorCCSUltima.ScanRate">
             <summary>Fixed acquisition rate identifier for a list of values defined in <see cref="T:STIL_NET.enFixedScanRates_CCS_ULTIMA"/> enumeration</summary>
            <remarks>For free frequency, use the <see cref="P:STIL_NET.sensor.FreeFrequency"/> parameter</remarks>
        </member>
        <member name="T:STIL_NET.sensorChr">
            <summary>Class cSensorChr</summary>
        </member>
        <member name="M:STIL_NET.sensorChr.#ctor(System.UInt16,STIL_NET.enDigitalOutputChannel,STIL_NET.sensorManager)">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorChr.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.sensorChr.SetDigitalOutput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>This function tells for each data item if it is transmitted or not. Call this function when <see cref="P:STIL_NET.sensor.MeasureMode"/> is in distance mode.</summary>
            <param name="bDistance">TRUE if diatance is sent</param>
            <param name="bIntensity">TRUE if Intensity is sent</param>
            <param name="bBarycenter">TRUE if barycenter is sent</param>
            <param name="bState">TRUE if State is sent</param>
            <param name="bCounter">TRUE if counter is sent</param>
        </member>
        <member name="M:STIL_NET.sensorChr.SetDigitalOutput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>This function tells for each data item if it is transmitted or not. Call this function when <see cref="P:STIL_NET.sensor.MeasureMode"/> is in thickness mode.</summary>
            <param name="bThickness">TRUE if thickness is transmitted</param>
            <param name="bDistance1">TRUE if bDistance1 is transmitted</param>
            <param name="bDistance2">TRUE if bDistance2 is transmitted</param>
            <param name="bIntensity1">TRUE if bIntensity1 is transmitted</param>
            <param name="bIntensity2">TRUE if bIntensity2 is transmitted</param>
            <param name="bBarycenter1">TRUE if bBarycenter1 is transmitted</param>
            <param name="bBarycenter2">TRUE if bBarycenter2 is transmitted</param>
            <param name="bState">TRUE if bState is transmitted</param>
        </member>
        <member name="P:STIL_NET.sensorChr.RightDetectionLimit">
            <summary>Property for the right-side detection limit (interferometric mode only)</summary>
        </member>
        <member name="P:STIL_NET.sensorChr.QualityThreshold">
            <summary>Property for the quality threshold (interferometric mode only)</summary>
        </member>
        <member name="P:STIL_NET.sensorChr.LeftDetectionLimit">
            <summary>Property for the left-side detection limit (interferometric mode only)</summary>
        </member>
        <member name="P:STIL_NET.sensorChr.BracketedMode">
            <summary>property for the activation state of the "limited range" mode (interferometric mode only)</summary>
        </member>
        <member name="T:STIL_NET.STILDataEventArgs">
            <summary>This class stores all acquired data</summary>
        </member>
        <member name="F:STIL_NET.STILDataEventArgs.DataArray">
            <summary>Double dimension array.Array can be of type float or numeric.</summary>
        </member>
        <member name="F:STIL_NET.STILDataEventArgs.DataCaption">
            <summary>String array.Displayed Data name.</summary>
        </member>
        <member name="M:STIL_NET.STILDataEventArgs.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.STILDataEventArgs.GetArrayLength">
            <summary>Returns the lengh for each array, in other words, the number of points acquired.</summary>
            <returns>Length array</returns>
        </member>
        <member name="M:STIL_NET.STILDataEventArgs.GetDataArrayCount">
            <summary>Returns the number arrays acquired (distance + intensity = 2).</summary>
            <returns>Array count</returns>
        </member>
        <member name="M:STIL_NET.STILDataEventArgs.GetDataArray(System.Int32)">
            <summary>Returns an a array depending on iDataID.</summary>
            <param name="iDataID">ID of the data array to return</param>
            <returns>Array class reference</returns>
        </member>
        <member name="M:STIL_NET.STILDataEventArgs.GetDataArrayFloat(System.Int32)">
            <summary>Returns a floating array depending on iDataID. Returns null if the data cannot be converted into float type.</summary>
            <param name="iDataID">ID of the data array to return</param>
            <returns>Array float</returns>
        </member>
        <member name="T:STIL_NET.CALLBACK_PLUGGED_SENSOR">
            <summary>Sensor plugged delegate.</summary>
        </member>
        <member name="T:STIL_NET.CALLBACK_UNPLUGGED_SENSOR">
            <summary>Sensor unplugged delegate.</summary>
        </member>
        <member name="T:STIL_NET.CALLBACK_FAST_PROCESS">
            <summary>delegate for Fast process the Last Measure Point. \n WARNING : the process time must be as small as possible</summary>
        </member>
        <member name="T:STIL_NET.OnPluggedHandler">
            <summary>Sensor plugged delegate.</summary>
        </member>
        <member name="T:STIL_NET.OnUnPluggedHandler">
            <summary>Sensor unplugged delegate.</summary>
        </member>
        <member name="T:STIL_NET.dll_chr">
            <summary>
            Class with DLL link importation
            </summary>
        </member>
        <member name="M:STIL_NET.dll_chr.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.dll_chr.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.dll_chr.Init">
            <summary>Init</summary>
            <returns>False on init error</returns>
        </member>
        <member name="M:STIL_NET.dll_chr.InitEx">
            <summary>Init with plug and unplug sensor callback</summary>
            <returns>False on init error</returns>
        </member>
        <member name="M:STIL_NET.dll_chr.Release">
            <summary>Release</summary>
            <returns>False on release error</returns>
        </member>
        <member name="M:STIL_NET.dll_chr.OnCallBackPluggedSensor(System.Int32,System.Int32,System.Int32)">
            <summary>Plugged Sensor callback</summary>
            <param name="SensorType">the sensor type</param>
            <param name="ConnectionType">the connection type</param>
            <param name="SerialNumber">the sensor serial number</param>
        </member>
        <member name="M:STIL_NET.dll_chr.OnCallBackUnPluggedSensor(System.Int32,System.Int32,System.Int32)">
            <summary>Unplugged Sensor callback</summary>
            <param name="SensorType">the sensor type</param>
            <param name="ConnectionType">the connection type</param>
            <param name="SerialNumber">the sensor serial number</param>
        </member>
        <member name="E:STIL_NET.dll_chr.OnPlugged">
            <summary>Event called just before sensor being arrived.</summary>
        </member>
        <member name="E:STIL_NET.dll_chr.OnUnPlugged">
            <summary>Event called just before sensor being leaved.</summary>
        </member>
        <member name="T:STIL_NET.sensorDuo">
            <summary>Class cSensorDuo</summary>
        </member>
        <member name="M:STIL_NET.sensorDuo.#ctor(System.UInt16,STIL_NET.enDigitalOutputChannel,STIL_NET.sensorManager)">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorDuo.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.sensorDuo.SetDigitalOutput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Configures which data should be transmitted by the sensor. Call this function when <see cref="P:STIL_NET.sensor.MeasureMode"/> is in confocal chromatic distance mode.</summary>
            <param name="bDistance"><see langword="true"/> if Distance is transmitted</param>
            <param name="bIntensity"><see langword="true"/> if Intensity is transmitted</param>
            <param name="bCounter"><see langword="true"/> if Counter is transmitted</param>
            <param name="bBarycenter"><see langword="true"/> if Barycenter is transmitted</param>
            <param name="bState"><see langword="true"/> if State is transmitted</param>
        </member>
        <member name="M:STIL_NET.sensorDuo.SetDigitalOutput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>This function returns the number of available data items, which depends on controller type.</summary>
            <param name="bThickness"><see langword="true"/> if Thickness is transmitted</param>
            <param name="bDistance1"><see langword="true"/> if Distance1 is transmitted</param>
            <param name="bDistance2"><see langword="true"/> if Distance2 is transmitted</param>
            <param name="bCounter"><see langword="true"/> if Counter is transmitted</param>
            <param name="bIntensity1"><see langword="true"/> if Intensity1 is transmitted</param>
            <param name="bIntensity2"><see langword="true"/> if Intensity2 is transmitted</param>
            <param name="barycenter1"><see langword="true"/> if Barycenter1 is transmitted</param>
            <param name="barycenter2"><see langword="true"/> if Barycenter2 is transmitted</param>
            <param name="bState"><see langword="true"/> if State is transmitted</param>
        </member>
        <member name="P:STIL_NET.sensorDuo.Language">
            <summary>Language of the sensor software.</summary>
        </member>
        <member name="P:STIL_NET.sensorDuo.ScanRate">
             <summary>Fixed acquisition rate identifier for a list of values defined in <see cref="T:STIL_NET.enFixedScanRates_DUO"/> enumeration</summary>
            <remarks>For free frequency, use the <see cref="P:STIL_NET.sensor.FreeFrequency"/> parameter</remarks>
        </member>
        <member name="P:STIL_NET.sensorDuo.SAWLIRefractiveIndex">
            <summary>
            Get the refractive index in Interferometric mode (Only for SAWLI Controllers).
            </summary>
        </member>
        <member name="T:STIL_NET.sensorManager">
            <summary>SensorManager Class</summary>
        </member>
        <member name="F:STIL_NET.sensorManager.MAX_SENSOR">
            <summary>Max sensor</summary>
        </member>
        <member name="F:STIL_NET.sensorManager.instanceCounter">
            <summary>>instanceCounter : Instance counter for release</summary>
        </member>
        <member name="M:STIL_NET.sensorManager.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorManager.Finalize">
            <summary>Standard destructor</summary>
        </member>
        <member name="M:STIL_NET.sensorManager.Init">
            <summary>Function to be called before at the start of your application.</summary>
        </member>
        <member name="M:STIL_NET.sensorManager.Release">
            <summary>Function to be called before at the end of your application.</summary>
        </member>
        <member name="M:STIL_NET.sensorManager.RemoveSensorFromList(STIL_NET.sensor)">
            <summary>Remove the sensor object odf the list</summary>
            <param name="sensor">sensor object</param>
            TODO DMO internal -> public
        </member>
        <member name="M:STIL_NET.sensorManager.GetDllChrVersion">
            <summary>
            DLL version number
            </summary>
            <returns>Returns the version of DLL_CHR.dll</returns>
        </member>
        <member name="M:STIL_NET.sensorManager.GetValidCom">
            <summary>request the list of communication ports available on the pc</summary>
            <returns>list of communication ports available</returns> 
        </member>
        <member name="M:STIL_NET.sensorManager.IsValidIpAddress(System.String)">
            <summary>Checks the validity of an IP address.</summary>
            <param name="strIn">IP address to verify</param>
            <returns><see langword="true"/> if successfull, <see langword="false"/> in case of failure </returns>
        </member>
        <member name="M:STIL_NET.sensorManager.OpenUsbConnection(System.String,STIL_NET.enSensorType,System.String,System.String)">
            <summary>This function connects a sensor to an available USB port and return a new sensor object</summary>
            <param name="sensorname">The name that will be attributed to the sensor</param>
            <param name="SensorType">The type of sensor</param>
            <param name="UsbDeviceName">This parameter is necessary in order to manage several sensors (up to 16) connected to different USB ports simultaneously.To get the list of the sensors connected, call <see cref="P:STIL_NET.sensor.UsbDeviceList"/></param>
            <param name="ConfigFile">The name of a file comprising the default configuration for the sensor. If null, the current sensor configuration is read.</param>
            <returns>Instance of a <see cref="T:STIL_NET.sensor"/> object if successfully connected</returns>
        </member>
        <member name="M:STIL_NET.sensorManager.OnCallBackStatusConnection(System.Int32,System.Int32)">
            <summary>Static function called by the C ANSI DLL_CHR.dll </summary>
            <param name="i1">the sensor ID MCHR_ID if unplugged sensor or serial number if plug sensor</param>
            <param name="i2"> as serial number and event type : value &amp; 0x000000ff == 1 for Unplugged sensor \n\r\t  value &amp; 0x000000ff == 0 || 0xff for plug new sensor \n\r  value &amp; 0x0000ff00 => type of sensor to plug</param>
        </member>
        <member name="M:STIL_NET.sensorManager.OpenSerialConnection(System.String,STIL_NET.enSensorType,System.UInt16,System.UInt32,System.String)">
            <summary>This function connects a sensor to an available serial port (RS232 or RS422) and returns a new CSensor object.</summary>
            <param name="sensorname">The name that will be attributed to the sensor</param>
            <param name="SensorType">The type of sensor</param>
            <param name="idSerialPort">The COM PORT ID of the Serial port to which the sensor is connected.If the specified value is 0, the function searches the first COM PORT where a sensor is connected</param>
            <param name="uiBaudRate">Serial port Baud rate. If the specified value is 0, the function searches automatically for the Baud rate</param>
            <param name="ConfigFile">The name of a file comprising the default configuration for the sensor. If null, the current sensor configuration is read.</param>
            <returns>Instance of a <see cref="T:STIL_NET.sensor"/> object if successfully connected</returns>
        </member>
        <member name="M:STIL_NET.sensorManager.OpenEthernetconnection(System.String,STIL_NET.enSensorType,System.String,System.String)">
            <summary>This function connects a sensor to an available Ethernet port and adds it to the Sensor List.</summary>
            <param name="sensorname">The name that will be attributed to the sensor</param>
            <param name="SensorType">The type of sensor</param>
            <param name="sIpAddress">IP address of the Ethernet port</param>
            <param name="ConfigFile">The name of a file comprising the default configuration for the sensor. If null, the current sensor configuration is read.</param>
            <returns>Instance of a <see cref="T:STIL_NET.sensor"/> object if successfully connected</returns>
        </member>
        <member name="E:STIL_NET.sensorManager.OnError">
            <summary>Error event</summary>
        </member>
        <member name="P:STIL_NET.sensorManager.DllChrVersion">
            <summary>DLL CHR version number</summary>        
        </member>
        <member name="P:STIL_NET.sensorManager.DllSensorsVersion">
            <summary>DLL Sensors version number</summary>        
        </member>
        <member name="T:STIL_NET.sensorManager.ErrorHandler">
            <summary>Delagate for error event</summary>
        </member>
        <member name="T:STIL_NET.cAcqParamMeasurement">
            <summary>
            Class for data measurement wrapper Win32 / Net
            </summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.CHRDistanceString">
            <summary>List of strings of digital outputs corresponding to the CHR distance mode.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.CHRThicknessString">
            <summary>List of strings of digital outputs corresponding to the CHR thickness mode.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.CCSDistanceString">
            <summary>List of strings of digital outputs corresponding to the CCS distance mode.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.CCSThicknessString">
            <summary>List of strings of digital outputs corresponding to the CCS thickness mode.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.DUODistanceString">
            <summary>List of strings of digital outputs corresponding to the DUO distance mode.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.DUOThicknessString">
            <summary>List of strings of digital outputs corresponding to the DUO thickness mode.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.DUOSAWLIDistanceString">
            <summary>List of strings of digital outputs corresponding to the DUO SAWLI distance mode.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.DUOSAWLIThicknessString">
            <summary>List of strings of digital outputs corresponding to the DUO SAWLI thickness mode.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.SPSDistanceString">
            <summary>List of strings of digital outputs corresponding to the SPS distance mode.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.SPSThicknessString">
            <summary>List of strings of digital outputs corresponding to the SPS thickness mode.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.SPSAlpha1DistanceString">
            <summary>List of strings of digital outputs corresponding to the SPSAlpha1 distance mode.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.SPSAlpha1ThicknessString">
            <summary>List of strings of digital outputs corresponding to the SPSAlpha1 thickness mode.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.RUBY">
            <summary>List of strings of digital outputs corresponding to the RUBY.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.NumberOfPoints">
            <summary>Number of points</summary> 
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.NumberPointsTRE">
            <summary>Number of points in TRE mode</summary> 
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.NumberOfBuffers">
            <summary>Number of buffers</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.BufferLength">
            <summary>Buffer length</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.NumberOfPointsBeforeSignal">
            <summary>Number of points before signal event</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.EnableEvent">
            <summary><see langword="true"/>allows the event</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.EnableBufferTransmittedData">
            <summary><see cref="T:STIL_NET.sEnableBufferTransmittedData"/> to activate the channels used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.EnableBufferThickness">
            <summary><see cref="T:STIL_NET.sEnableBufferThickness"/> to activate the channels used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.EnableBufferAltitude">
            <summary><see cref="T:STIL_NET.sEnableBufferAltitude"/> to activate the channels used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.EnableBufferDepth">
            <summary><see cref="T:STIL_NET.sEnableBufferDepth"/> to activate the channels used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.EnableBufferInterferometricThickness">
            <summary><see cref="T:STIL_NET.sEnableBufferDepth"/> to activate the channels used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.EnableBufferInterferometricThicknessSAWLI">
            <summary><see cref="T:STIL_NET.sEnableBufferDepth"/> to activate the channels used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.Spectrum">
            <summary><see cref="T:STIL_NET.sSpectrumParameters"/> to activate the spectrum options used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.Trigger">
            <summary><see cref="T:STIL_NET.sTriggerParameters"/> to activate the trigger options used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.EnableEncoder">
            <summary><see cref="T:STIL_NET.sEnableBufferEncoder"/> to activate the encoder options used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.EnableAutoAdaptive">
            <summary>Enabled the acquisition AutoAdaptive</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.DigitalOutput">
            <summary>DigitalOutput used</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.forceDigitalOutputList">
            <summary>List of digital outputs a force.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.measureMode">
            <summary>List of digital outputs calculate.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.Timeout">
            <summary>Timeout</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.Frequency">
            <summary>Current frequency</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.MaxNumberOfDigitalOutput">
            <summary>Number of available data items, which depends on controller type.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamMeasurement.NumberMaxPixels">
            <summary>Number Max Pixels</summary>
        </member>
        <member name="M:STIL_NET.cAcqParamMeasurement.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.cAcqParamMeasurement.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.cAcqParamMeasurement.Init(STIL_NET.sensor)">
            <summary>Function that automatically initializes the parameters <see cref="P:STIL_NET.cAcqParamMeasurement.ConnectionType"/>, <see cref="P:STIL_NET.cAcqParamMeasurement.SensorType"/>, <see cref="F:STIL_NET.cAcqParamMeasurement.Frequency"/> and <see cref="F:STIL_NET.cAcqParamMeasurement.NumberMaxPixels"/>.</summary>
            <param name="Sensor"> Sensor object</param>
            <returns><see cref="T:STIL_NET.enSensorError"/>The return value</returns>
        </member>
        <member name="M:STIL_NET.cAcqParamMeasurement.CheckParameters">
            <summary>Function that copies the data of the current class to another.</summary>
            <remarks>If conflicts are detected the parameters in question will be reset.</remarks>
            <returns>Output class initialized with data from the current class.</returns>
        </member>
        <member name="M:STIL_NET.cAcqParamMeasurement.Copy">
            <summary>Function that copies the data of the current class to another.</summary>
            <remarks>All parameters are copied except the digital outputs.</remarks>
            <returns>Output class initialized with data from the current class.</returns>
        </member>
        <member name="M:STIL_NET.cAcqParamMeasurement.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="P:STIL_NET.cAcqParamMeasurement.AcquisitionFunction">
            <summary>Property that provides access to the list of digital outputs.</summary>
        </member>
        <member name="P:STIL_NET.cAcqParamMeasurement.ForceDigitalOutputList">
            <summary>
            property of the default values​of digital outputs. 
            This list is used to force a different value of the digital output. 
            Indeed, if a value is not enforced it will default use to the Connection Type.
            </summary>
        </member>
        <member name="P:STIL_NET.cAcqParamMeasurement.MeasureMode">
            <summary>
            Type of MeasureMode defined in <see cref="T:STIL_NET.enMeasureMode"/>. 
            </summary>
        </member>
        <member name="P:STIL_NET.cAcqParamMeasurement.SensorType">
            <summary>Type of the opened sensor defined in <see cref="T:STIL_NET.enSensorType"/>.</summary>
        </member>
        <member name="P:STIL_NET.cAcqParamMeasurement.ConnectionType">
            <summary>Connection type of a device defined in <see cref="T:STIL_NET.enChrConnection"/>.</summary>
        </member>
        <member name="T:STIL_NET.sSpectrumParameters">
            <summary>Class sSpectrumParameters</summary>
        </member>
        <member name="F:STIL_NET.sSpectrumParameters.MaxNumberOfPixels">
            <summary>This const is max the number of pixels.</summary>
        </member>
        <member name="F:STIL_NET.sSpectrumParameters.Enable">
            <summary>This parameter activates or deactivates Spectrum mode.</summary>
        </member>
        <member name="F:STIL_NET.sSpectrumParameters.SignalType">
            <summary>This parameter indicates the signal type.</summary>
        </member>
        <member name="F:STIL_NET.sSpectrumParameters.NumberOfPixels">
            <summary>This parameter indicates the number of pixels.</summary>
        </member>
        <member name="F:STIL_NET.sSpectrumParameters.FirstPixel">
            <summary>This parameter indicates the first pixel of spectrum.</summary>
        </member>
        <member name="F:STIL_NET.sSpectrumParameters.Sampling">
            <summary>This parameter indicates et the spectral sampling.</summary>
        </member>
        <member name="M:STIL_NET.sSpectrumParameters.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sSpectrumParameters.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sSpectrumParameters.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sSpectrumParameters.Copy(STIL_NET.sSpectrumParameters)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for spectrum acquisition</param>
            <returns>copy of data used for spectrum acquisition</returns>
        </member>
        <member name="T:STIL_NET.sTriggerParameters">
            <summary>Class sTriggerParameters</summary>
        </member>
        <member name="F:STIL_NET.sTriggerParameters.Enable">
            <summary>This parameter activates or deactivates Trigger mode (if Trigger mode is active acquisition will wait for a "Trigger in" signal to start, otherwise acquisition starts immediately).</summary>
        </member>
        <member name="F:STIL_NET.sTriggerParameters.Type">
            <summary>This parameter indicates the trigger mode (TRG /TRE/TRN/ TRS) </summary>
        </member>
        <member name="F:STIL_NET.sTriggerParameters.HighLevelOrRisingEdgeActivated">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="M:STIL_NET.sTriggerParameters.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sTriggerParameters.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sTriggerParameters.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sTriggerParameters.Copy(STIL_NET.sTriggerParameters)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement with trigger</param>
            <returns>copy of data used for measurement with trigger</returns>
        </member>
        <member name="T:STIL_NET.sEnableBufferEncoder">
            <summary>Class sEnableBufferEncoder</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferEncoder.Encoder1">
            <summary>Enabled the acquisition Encoder1</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferEncoder.Encoder2">
            <summary>Enabled the acquisition Encoder2</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferEncoder.Encoder3">
            <summary>Enabled the acquisition Encoder3</summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferEncoder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferEncoder.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferEncoder.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferEncoder.Copy(STIL_NET.sEnableBufferEncoder)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sEnableBufferEncoder.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sEnableBufferInterferometricThickness">
            <summary>Class sEnableBufferInterferometricThickness</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThickness.Thickness1">
            <summary>Enabled the acquisition Thickness</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThickness.Thickness2">
            <summary>Enabled the acquisition Thickness2</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThickness.Thickness3">
            <summary>Enabled the acquisition Thickness3</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThickness.Quality1">
            <summary>Enabled the acquisition Quality1</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThickness.Quality2">
            <summary>Enabled the acquisition Quality2</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThickness.Quality3">
            <summary>Enabled the acquisition Quality3</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThickness.Intensity">
            <summary>Enabled the acquisition Intensity</summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferInterferometricThickness.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferInterferometricThickness.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferInterferometricThickness.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferInterferometricThickness.Copy(STIL_NET.sEnableBufferInterferometricThickness)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sEnableBufferInterferometricThickness.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sEnableBufferInterferometricThicknessSAWLI">
            <summary>Class sEnableBufferInterferometricThicknessSAWLI</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.Thickness1">
            <summary>Enabled the acquisition Thickness</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.Thickness2">
            <summary>Enabled the acquisition Thickness2</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.Thickness3">
            <summary>Enabled the acquisition Thickness3</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.Quality1">
            <summary>Enabled the acquisition Quality1</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.Quality2">
            <summary>Enabled the acquisition Quality2</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.Quality3">
            <summary>Enabled the acquisition Quality3</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.Intensity">
            <summary>Enabled the acquisition Intensity</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.Thickness">
            <summary>Enabled the acquisition Thickness</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.Copy(STIL_NET.sEnableBufferInterferometricThicknessSAWLI)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sEnableBufferInterferometricThicknessSAWLI.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sEnableBufferThickness">
            <summary>Class sEnableBufferThickness</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferThickness.Thickness">
            <summary>Enabled the acquisition Thickness</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferThickness.Distance1">
            <summary>Enabled the acquisition Distance1</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferThickness.Distance2">
            <summary>Enabled the acquisition Distance2</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferThickness.Intensity1">
            <summary>Enabled the acquisition Intensity1</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferThickness.Intensity2">
            <summary>Enabled the acquisition Intensity2</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferThickness.BaryCenter1">
            <summary>Enabled the acquisition BaryCenter1</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferThickness.BaryCenter2">
            <summary>Enabled the acquisition BaryCenter2</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferThickness.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferThickness.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferThickness.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferThickness.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferThickness.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferThickness.Copy(STIL_NET.sEnableBufferThickness)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sEnableBufferThickness.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sEnableBufferAltitude">
            <summary>Class sEnableBufferAltitude</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferAltitude.Altitude">
            <summary>Enabled the acquisition Altitude</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferAltitude.Intensity">
            <summary>Enabled the acquisition Intensity</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferAltitude.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferAltitude.BaryCenter">
            <summary>Enabled the acquisition BaryCenter</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferAltitude.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferAltitude.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferAltitude.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferAltitude.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferAltitude.Copy(STIL_NET.sEnableBufferAltitude)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sEnableBufferAltitude.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sEnableBufferDepth">
            <summary>Class sEnableBufferDepth</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferDepth.Depth">
            <summary>Enabled the acquisition Depth</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferDepth.Intensity">
            <summary>Enabled the acquisition Intensity</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferDepth.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferDepth.BaryCenter">
            <summary>Enabled the acquisition BaryCenter</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferDepth.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferDepth.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferDepth.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferDepth.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferDepth.Copy(STIL_NET.sEnableBufferDepth)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sEnableBufferDepth.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sChrDistance">
            <summary>Class sEnableBufferDepth</summary>
        </member>
        <member name="F:STIL_NET.sChrDistance.Distance">
            <summary>Enabled the acquisition Distance</summary>
        </member>
        <member name="F:STIL_NET.sChrDistance.Intensity">
            <summary>Enabled the acquisition Intensity</summary>
        </member>
        <member name="F:STIL_NET.sChrDistance.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="F:STIL_NET.sChrDistance.BaryCenter">
            <summary>Enabled the acquisition BaryCenter</summary>
        </member>
        <member name="F:STIL_NET.sChrDistance.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="M:STIL_NET.sChrDistance.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sChrDistance.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sChrDistance.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sChrDistance.Copy(STIL_NET.sChrDistance)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sChrDistance.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sChrThickness">
            <summary>Class sChrThickness</summary>
        </member>
        <member name="F:STIL_NET.sChrThickness.Thickness">
            <summary>Enabled the acquisition Thickness</summary>
        </member>
        <member name="F:STIL_NET.sChrThickness.Distance1">
            <summary>Enabled the acquisition Distance1</summary>
        </member>
        <member name="F:STIL_NET.sChrThickness.Distance2">
            <summary>Enabled the acquisition Distance2</summary>
        </member>
        <member name="F:STIL_NET.sChrThickness.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="F:STIL_NET.sChrThickness.Intensity1">
            <summary>Enabled the acquisition Intensity1</summary>
        </member>
        <member name="F:STIL_NET.sChrThickness.Intensity2">
            <summary>Enabled the acquisition Intensity2</summary>
        </member>
        <member name="F:STIL_NET.sChrThickness.BaryCenter1">
            <summary>Enabled the acquisition BaryCenter1</summary>
        </member>
        <member name="F:STIL_NET.sChrThickness.BaryCenter2">
            <summary>Enabled the acquisition BaryCenter2</summary>
        </member>
        <member name="M:STIL_NET.sChrThickness.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sChrThickness.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sChrThickness.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sChrThickness.Copy(STIL_NET.sChrThickness)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sChrThickness.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sCcsDistance">
            <summary>Class sCcsDistance</summary>
        </member>
        <member name="F:STIL_NET.sCcsDistance.Distance">
            <summary>Enabled the acquisition Distance</summary>
        </member>
        <member name="F:STIL_NET.sCcsDistance.AutoAdaptativeModeData">
            <summary>Enabled the acquisition AutoAdaptativeModeData</summary>
        </member>
        <member name="F:STIL_NET.sCcsDistance.Intensity">
            <summary>Enabled the acquisition Intensity</summary>
        </member>
        <member name="F:STIL_NET.sCcsDistance.BaryCenter">
            <summary>Enabled the acquisition BaryCenter</summary>
        </member>
        <member name="F:STIL_NET.sCcsDistance.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="F:STIL_NET.sCcsDistance.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="F:STIL_NET.sCcsDistance.Encoder1">
            <summary>Enabled the acquisition Encoder1</summary>
        </member>
        <member name="F:STIL_NET.sCcsDistance.Encoder2">
            <summary>Enabled the acquisition Encoder2</summary>
        </member>
        <member name="F:STIL_NET.sCcsDistance.Encoder3">
            <summary>Enabled the acquisition Encoder3</summary>
        </member>
        <member name="M:STIL_NET.sCcsDistance.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sCcsDistance.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sCcsDistance.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sCcsDistance.Copy(STIL_NET.sCcsDistance)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sCcsDistance.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sCcsThickness">
            <summary>Class sCcsDistance</summary>
        </member>
        <member name="F:STIL_NET.sCcsThickness.Thickness">
            <summary>Enabled the acquisition Thickness</summary>
        </member>
        <member name="F:STIL_NET.sCcsThickness.Distance1">
            <summary>Enabled the acquisition Distance1</summary>
        </member>
        <member name="F:STIL_NET.sCcsThickness.Distance2">
            <summary>Enabled the acquisition Distance2</summary>
        </member>
        <member name="F:STIL_NET.sCcsThickness.AutoAdaptativeModeData">
            <summary>Enabled the acquisition AutoAdaptativeModeData</summary>
        </member>
        <member name="F:STIL_NET.sCcsThickness.Intensity1">
            <summary>Enabled the acquisition Intensity1</summary>
        </member>
        <member name="F:STIL_NET.sCcsThickness.Intensity2">
            <summary>Enabled the acquisition Intensity2</summary>
        </member>
        <member name="F:STIL_NET.sCcsThickness.BaryCenter1">
            <summary>Enabled the acquisition BaryCenter1</summary>
        </member>
        <member name="F:STIL_NET.sCcsThickness.BaryCenter2">
            <summary>Enabled the acquisition BaryCenter2</summary>
        </member>
        <member name="F:STIL_NET.sCcsThickness.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="F:STIL_NET.sCcsThickness.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="F:STIL_NET.sCcsThickness.Encoder1">
            <summary>Enabled the acquisition Encoder1</summary>
        </member>
        <member name="F:STIL_NET.sCcsThickness.Encoder2">
            <summary>Enabled the acquisition Encoder2</summary>
        </member>
        <member name="F:STIL_NET.sCcsThickness.Encoder3">
            <summary>Enabled the acquisition Encoder3</summary>
        </member>
        <member name="M:STIL_NET.sCcsThickness.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sCcsThickness.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sCcsThickness.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sCcsThickness.Copy(STIL_NET.sCcsThickness)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sCcsThickness.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sSpsDistance">
            <summary>Class sSpsDistance</summary>
        </member>
        <member name="F:STIL_NET.sSpsDistance.Distance">
            <summary>Enabled the acquisition Distance</summary>
        </member>
        <member name="F:STIL_NET.sSpsDistance.AutoAdaptativeModeData">
            <summary>Enabled the acquisition AutoAdaptativeModeData</summary>
        </member>
        <member name="F:STIL_NET.sSpsDistance.Intensity">
            <summary>Enabled the acquisition Intensity</summary>
        </member>
        <member name="F:STIL_NET.sSpsDistance.BaryCenter">
            <summary>Enabled the acquisition BaryCenter</summary>
        </member>
        <member name="F:STIL_NET.sSpsDistance.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="F:STIL_NET.sSpsDistance.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="F:STIL_NET.sSpsDistance.Encoder1">
            <summary>Enabled the acquisition Encoder1</summary>
        </member>
        <member name="F:STIL_NET.sSpsDistance.Encoder2">
            <summary>Enabled the acquisition Encoder2</summary>
        </member>
        <member name="F:STIL_NET.sSpsDistance.Encoder3">
            <summary>Enabled the acquisition Encoder3</summary>
        </member>
        <member name="M:STIL_NET.sSpsDistance.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sSpsDistance.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sSpsDistance.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sSpsDistance.Copy(STIL_NET.sSpsDistance)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sSpsDistance.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sSpsThickness">
            <summary>Class sSpsThickness</summary>
        </member>
        <member name="F:STIL_NET.sSpsThickness.Thickness">
            <summary>Enabled the acquisition Thickness</summary>
        </member>
        <member name="F:STIL_NET.sSpsThickness.Distance1">
            <summary>Enabled the acquisition Distance1</summary>
        </member>
        <member name="F:STIL_NET.sSpsThickness.Distance2">
            <summary>Enabled the acquisition Distance2</summary>
        </member>
        <member name="F:STIL_NET.sSpsThickness.AutoAdaptativeModeData">
            <summary>Enabled the acquisition AutoAdaptativeModeData</summary>
        </member>
        <member name="F:STIL_NET.sSpsThickness.Intensity1">
            <summary>Enabled the acquisition Intensity1</summary>
        </member>
        <member name="F:STIL_NET.sSpsThickness.Intensity2">
            <summary>Enabled the acquisition Intensity2</summary>
        </member>
        <member name="F:STIL_NET.sSpsThickness.BaryCenter1">
            <summary>Enabled the acquisition BaryCenter1</summary>
        </member>
        <member name="F:STIL_NET.sSpsThickness.BaryCenter2">
            <summary>Enabled the acquisition BaryCenter2</summary>
        </member>
        <member name="F:STIL_NET.sSpsThickness.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="F:STIL_NET.sSpsThickness.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="F:STIL_NET.sSpsThickness.Encoder1">
            <summary>Enabled the acquisition Encoder1</summary>
        </member>
        <member name="F:STIL_NET.sSpsThickness.Encoder2">
            <summary>Enabled the acquisition Encoder2</summary>
        </member>
        <member name="F:STIL_NET.sSpsThickness.Encoder3">
            <summary>Enabled the acquisition Encoder3</summary>
        </member>
        <member name="M:STIL_NET.sSpsThickness.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sSpsThickness.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sSpsThickness.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sSpsThickness.Copy(STIL_NET.sSpsThickness)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sSpsThickness.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sSpsAlpha1Distance">
            <summary>Class sSpsAlpha1Distance</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Distance.Distance">
            <summary>Enabled the acquisition Distance</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Distance.Intensity">
            <summary>Enabled the acquisition Intensity</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Distance.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Distance.BaryCenter">
            <summary>Enabled the acquisition BaryCenter</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Distance.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="M:STIL_NET.sSpsAlpha1Distance.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sSpsAlpha1Distance.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sSpsAlpha1Distance.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sSpsAlpha1Distance.Copy(STIL_NET.sSpsAlpha1Distance)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sSpsAlpha1Distance.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sSpsAlpha1Thickness">
            <summary>Class sSpsAlpha1Thickness</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Thickness.Thickness">
            <summary>Enabled the acquisition Thickness</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Thickness.Distance1">
            <summary>Enabled the acquisition Distance1</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Thickness.Distance2">
            <summary>Enabled the acquisition Distance2</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Thickness.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Thickness.Intensity1">
            <summary>Enabled the acquisition Intensity1</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Thickness.Intensity2">
            <summary>Enabled the acquisition Intensity2</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Thickness.BaryCenter1">
            <summary>Enabled the acquisition BaryCenter1</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Thickness.BaryCenter2">
            <summary>Enabled the acquisition BaryCenter2</summary>
        </member>
        <member name="F:STIL_NET.sSpsAlpha1Thickness.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="M:STIL_NET.sSpsAlpha1Thickness.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sSpsAlpha1Thickness.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sSpsAlpha1Thickness.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sSpsAlpha1Thickness.Copy(STIL_NET.sSpsAlpha1Thickness)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sSpsAlpha1Thickness.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sDuoDistance">
            <summary>Class sDuoDistance</summary>
        </member>
        <member name="F:STIL_NET.sDuoDistance.Distance">
            <summary>Enabled the acquisition Distance</summary>
        </member>
        <member name="F:STIL_NET.sDuoDistance.Intensity">
            <summary>Enabled the acquisition Intensity</summary>
        </member>
        <member name="F:STIL_NET.sDuoDistance.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="F:STIL_NET.sDuoDistance.BaryCenter">
            <summary>Enabled the acquisition BaryCenter</summary>
        </member>
        <member name="F:STIL_NET.sDuoDistance.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="M:STIL_NET.sDuoDistance.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sDuoDistance.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sDuoDistance.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sDuoDistance.Copy(STIL_NET.sDuoDistance)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sDuoDistance.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sDuoThickness">
            <summary>Class sDuoDistance</summary>
        </member>
        <member name="F:STIL_NET.sDuoThickness.Thickness">
            <summary>Enabled the acquisition Thickness</summary>
        </member>
        <member name="F:STIL_NET.sDuoThickness.Distance1">
            <summary>Enabled the acquisition Distance1</summary>
        </member>
        <member name="F:STIL_NET.sDuoThickness.Distance2">
            <summary>Enabled the acquisition Distance2</summary>
        </member>
        <member name="F:STIL_NET.sDuoThickness.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="F:STIL_NET.sDuoThickness.Intensity1">
            <summary>Enabled the acquisition Intensity1</summary>
        </member>
        <member name="F:STIL_NET.sDuoThickness.Intensity2">
            <summary>Enabled the acquisition Intensity2</summary>
        </member>
        <member name="F:STIL_NET.sDuoThickness.BaryCenter1">
            <summary>Enabled the acquisition BaryCenter1</summary>
        </member>
        <member name="F:STIL_NET.sDuoThickness.BaryCenter2">
            <summary>Enabled the acquisition BaryCenter2</summary>
        </member>
        <member name="F:STIL_NET.sDuoThickness.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="M:STIL_NET.sDuoThickness.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sDuoThickness.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sDuoThickness.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sDuoThickness.Copy(STIL_NET.sDuoThickness)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sDuoThickness.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sDuoSawliDistance">
            <summary>Class sDuoSawliDistance</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliDistance.Distance">
            <summary>Enabled the acquisition Distance</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliDistance.Quality">
            <summary>Enabled the acquisition Quality</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliDistance.Intensity">
            <summary>Enabled the acquisition Intensity</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliDistance.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliDistance.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="M:STIL_NET.sDuoSawliDistance.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sDuoSawliDistance.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sDuoSawliDistance.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sDuoSawliDistance.Copy(STIL_NET.sDuoSawliDistance)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sDuoSawliDistance.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sDuoSawliThickness">
            <summary>Class sDuoSawliThickness</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliThickness.Thickness1">
            <summary>Enabled the acquisition Thickness1</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliThickness.Thickness2">
            <summary>Enabled the acquisition Thickness2</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliThickness.Thickness3">
            <summary>Enabled the acquisition Thickness3</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliThickness.Quality1">
            <summary>Enabled the acquisition Quality1</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliThickness.Quality2">
            <summary>Enabled the acquisition Quality2</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliThickness.Quality3">
            <summary>Enabled the acquisition Quality3</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliThickness.Intensity">
            <summary>Enabled the acquisition Intensity</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliThickness.NbThickness">
            <summary>Enabled the acquisition NbThickness</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliThickness.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="F:STIL_NET.sDuoSawliThickness.Status">
            <summary>Enabled the acquisition Status</summary>
        </member>
        <member name="M:STIL_NET.sDuoSawliThickness.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sDuoSawliThickness.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sDuoSawliThickness.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sDuoSawliThickness.Copy(STIL_NET.sDuoSawliThickness)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sDuoSawliThickness.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sRuby">
            <summary>Class sRuby</summary>
        </member>
        <member name="F:STIL_NET.sRuby.Coordinate0">
            <summary>Enabled the acquisition Coordinate0</summary>
        </member>
        <member name="F:STIL_NET.sRuby.Coordinate1">
            <summary>Enabled the acquisition Coordinate1</summary>
        </member>
        <member name="F:STIL_NET.sRuby.Coordinate2">
            <summary>Enabled the acquisition Coordinate2</summary>
        </member>
        <member name="F:STIL_NET.sRuby.Delta_Coordinate">
            <summary>Enabled the acquisition Delta_Coordinate</summary>
        </member>
        <member name="F:STIL_NET.sRuby.Spectral_Delta">
            <summary>Enabled the acquisition Spectral_Delta</summary>
        </member>
        <member name="F:STIL_NET.sRuby.Conformity">
            <summary>Enabled the acquisition Conformity</summary>
        </member>
        <member name="F:STIL_NET.sRuby.Counter">
            <summary>Enabled the acquisition Counter</summary>
        </member>
        <member name="M:STIL_NET.sRuby.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sRuby.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sRuby.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sRuby.Copy(STIL_NET.sRuby)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sRuby.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sEnableBufferTransmittedData">
            <summary>Class sEnableBufferTransmittedData</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferTransmittedData.ChrDistance">
            <summary>Enabled the acquisition ChrDistance section</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferTransmittedData.ChrThickness">
            <summary>Enabled the acquisition ChrThickness section</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferTransmittedData.CcsDistance">
            <summary>Enabled the acquisition CcsDistance section</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferTransmittedData.CcsThickness">
            <summary>Enabled the acquisition CcsThickness section</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferTransmittedData.SpsDistance">
            <summary>Enabled the acquisition SpsDistance section</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferTransmittedData.SpsThickness">
            <summary>Enabled the acquisition SpsThickness section</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferTransmittedData.SpsAlpha1Distance">
            <summary>Enabled the acquisition SpsAlpha1Distance section</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferTransmittedData.SpsAlpha1Thickness">
            <summary>Enabled the acquisition SpsAlpha1Thickness section</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferTransmittedData.DuoDistance">
            <summary>Enabled the acquisition DuoDistance section</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferTransmittedData.DuoThickness">
            <summary>Enabled the acquisition DuoThickness section</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferTransmittedData.DuoSawliDistance">
            <summary>Enabled the acquisition DuoSawliDistance section</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferTransmittedData.DuoSawliThickness">
            <summary>Enabled the acquisition DuoSawliThickness section</summary>
        </member>
        <member name="F:STIL_NET.sEnableBufferTransmittedData.Ruby">
            <summary>Enabled the acquisition Ruby section</summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferTransmittedData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferTransmittedData.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferTransmittedData.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sEnableBufferTransmittedData.Copy(STIL_NET.sEnableBufferTransmittedData)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">data used for measurement</param>
            <returns>copy of data used for measurement</returns>
        </member>
        <member name="M:STIL_NET.sEnableBufferTransmittedData.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more data is used for measurement, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sAcqParamMeasurementEvent">
            <summary>
            Class for data measurement events wrapper Win32 / Net
            </summary>
        </member>
        <member name="F:STIL_NET.sAcqParamMeasurementEvent.EventAcquireNPoints">
            <summary>allows the event EventAcquireNPoints</summary>
        </member>
        <member name="F:STIL_NET.sAcqParamMeasurementEvent.EventEndBuffer">
            <summary>allows the event EventEndBuffer</summary>
        </member>
        <member name="F:STIL_NET.sAcqParamMeasurementEvent.EventEndMeasurement">
            <summary>allows the event EventEndMeasurement</summary>
        </member>
        <member name="F:STIL_NET.sAcqParamMeasurementEvent.EventEndAcquire">
            <summary>allows the event EventEndAcquire</summary>
        </member>
        <member name="F:STIL_NET.sAcqParamMeasurementEvent.EventEndTriggerTRNorTRS">
            <summary>allows the event EventEndTriggerTRNorTRS</summary>
        </member>
        <member name="F:STIL_NET.sAcqParamMeasurementEvent.EventStartingAcquisition">
            <summary>allows the event EventStartingAcquisition</summary>
        </member>
        <member name="M:STIL_NET.sAcqParamMeasurementEvent.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.sAcqParamMeasurementEvent.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.sAcqParamMeasurementEvent.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.sAcqParamMeasurementEvent.Copy(STIL_NET.sAcqParamMeasurementEvent)">
            <summary>
            Copy source to destination parameters
            </summary>
            <param name="source">events type used for data measurement</param>
            <returns>copy events type used for data measurement</returns>
        </member>
        <member name="M:STIL_NET.sAcqParamMeasurementEvent.IsUsed">
            <summary>Use state.</summary>
            <returns><see langword="true"/> if one or more events type for data measurement is used, <see langword="false"/> in other case.</returns>
        </member>
        <member name="T:STIL_NET.sensorRuby">
            <summary>
            sensorRuby class
            </summary>
        </member>
        <member name="M:STIL_NET.sensorRuby.#ctor(System.UInt16,STIL_NET.enDigitalOutputChannel,STIL_NET.sensorManager)">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorRuby.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="P:STIL_NET.sensorRuby.Language">
            <summary>Language of the sensor software.</summary>
        </member>
        <member name="T:STIL_NET.sensorSPSAlpha">
            <summary>Class cSensorCCS</summary>
        </member>
        <member name="M:STIL_NET.sensorSPSAlpha.#ctor(System.UInt16,STIL_NET.enDigitalOutputChannel,STIL_NET.sensorManager)">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorSPSAlpha.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.sensorSPSAlpha.SetDigitalOutput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function tells for each data item if it is transmitted or not
            Call this function when <see cref="P:STIL_NET.sensor.MeasureMode"/> is in distance mode
            </summary>
            <param name="bDistance"><see langword="true"/> if distance is sent</param>
            <param name="bIntensity"><see langword="true"/> if Intensity is sent</param>
            <param name="bBarycenter"><see langword="true"/> if barycenter is sent</param>
            <param name="bState"><see langword="true"/> if State is sent</param>
            <param name="bCounter"><see langword="true"/> if counter is sent</param>
            <param name="bEncoder1"><see langword="true"/> if encoder1 is sent</param>
            <param name="bEncoder2"><see langword="true"/> if encoder2 is sent</param>
            <param name="bEncoder3"><see langword="true"/> if encoder3 is sent</param>
            <param name="bAutoAdapative"><see langword="true"/> if bAutoAdapative is sent</param>
        </member>
        <member name="M:STIL_NET.sensorSPSAlpha.SetDigitalOutput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function tells for each data item if it is transmitted or not
            Call this function when <see cref="P:STIL_NET.sensor.MeasureMode"/> is in thickness mode
            </summary>
            <param name="bThickness"><see langword="true"/> if thickness is transmitted</param>
            <param name="bDistance1"><see langword="true"/> if bDistance1 is transmitted</param>
            <param name="bDistance2"><see langword="true"/> if bDistance2 is transmitted</param>
            <param name="bIntensity1"><see langword="true"/> if bIntensity1 is transmitted</param>
            <param name="bIntensity2"><see langword="true"/> if bIntensity2 is transmitted</param>
            <param name="bBarycenter1"><see langword="true"/> if bBarycenter1 is transmitted</param>
            <param name="bBarycenter2"><see langword="true"/> if bBarycenter2 is transmitted</param>
            <param name="bState"><see langword="true"/> if bState is transmitted</param>
            <param name="bCounter"><see langword="true"/> if bCounter is transmitted</param>
            <param name="bEncoder1"><see langword="true"/> if bEncoder1 is transmitted</param>
            <param name="bEncoder2"><see langword="true"/> if bEncoder2 is transmitted</param>
            <param name="bEncoder3"><see langword="true"/> if bEncoder3 is transmitted</param>
            <param name="bAutoAdapative"><see langword="true"/> if bAutoAdapative is transmitted</param>
        </member>
        <member name="E:STIL_NET.sensorSPSAlpha.OnScanRateChange">
            <summary>Event called when the scan rate pen has changed.</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.AutoRateMode">
            <summary>Get/Set to detect if the SPS is in automatic frequency mode(SPS only)</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.AutoDarkMode">
            <summary>This function gets or sets automatic-dark activation flag (SPS sensors only ).</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.AutoModeThreshold">
            <summary>This function gets or sets automatic dark mode (Auto LED et Auto Rate) (SPS sensors only ).</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.BaryCenterScale">
            <summary>The scale for the digital output of the Barycenter data item in both Distance mode and Thickness mode (SPS sensors only ).</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.BaryCenterRef">
            <summary>The offset for the digital output of the Barycenter data item in both Distance mode and Thickness mode (SPS sensors only ).</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.HoldLastValue">
            <summary>This function determines the behavior of the sensor in case one or more measurements fail.</summary>
            <remarks>If <see langword="NbPoints"/> is null, all data items are set to 0.
            <br/><br/>
            If <see langword="NbPoints"/> is positive, the sensor “holds” the last valid
            measured values (SPS sensors only).</remarks>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.LedAuto">
            <summary>
            Auto-adaptive LED mode(SPS sensors only )
            If true, <see cref="P:STIL_NET.sensor.LedBrightness"/> will be unavailable
            </summary>
            <seealso cref="P:STIL_NET.sensor.LedBrightness"/>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.LedType">
            <summary>Led type selected. Source type can be either Internal LED or External source</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.LevelEdgeFlag">
            <summary>property for active edge (or active state) for trigger signals.</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.NonExistantSecondPeakHandling">
            <summary>Led type selected. Source type can be either Internal LED or External source</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.PeakSelectionMode">
            <summary>This function determines the way the sensor selects the peak in Distance mode in case two peaks are present (SPS sensors only ).</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.ThicknessDetectionThreshold">
            <summary>Current detection thresholds for thickness mode.</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.FirstUsablePixel">
            <summary>First Usable Pixel</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.NumberOfUsablePixels">
            <summary>Number Of Usable Pixels</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha.ScanRate">
             <summary>Fixed acquisition rate identifier for a list of values defined in <see cref="T:STIL_NET.enFixedScanRates_SPS_ALPHA"/> enumeration</summary>
            <remarks>For free frequency, use the <see cref="P:STIL_NET.sensor.FreeFrequency"/> parameter</remarks>
        </member>
        <member name="T:STIL_NET.sensorSPSAlpha1">
            <summary>Class cSensorDuo</summary>
        </member>
        <member name="M:STIL_NET.sensorSPSAlpha1.#ctor(System.UInt16,STIL_NET.enDigitalOutputChannel,STIL_NET.sensorManager)">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorSPSAlpha1.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.sensorSPSAlpha1.SetDigitalOutput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Configures which data should be transmitted by the sensor. Call this function when <see cref="P:STIL_NET.sensor.MeasureMode"/> is in confocal chromatic distance mode.</summary>
            <param name="bDistance"><see langword="true"/> if Distance is transmitted</param>
            <param name="bIntensity"><see langword="true"/> if Intensity is transmitted</param>
            <param name="bCounter"><see langword="true"/> if Counter is transmitted</param>
            <param name="bBarycenter"><see langword="true"/> if Barycenter is transmitted</param>
            <param name="bState"><see langword="true"/> if State is transmitted</param>
        </member>
        <member name="M:STIL_NET.sensorSPSAlpha1.SetDigitalOutput(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>This function returns the number of available data items, which depends on controller type.</summary>
            <param name="bThickness"><see langword="true"/> if Thickness is transmitted</param>
            <param name="bDistance1"><see langword="true"/> if Distance1 is transmitted</param>
            <param name="bDistance2"><see langword="true"/> if Distance2 is transmitted</param>
            <param name="bCounter"><see langword="true"/> if Counter is transmitted</param>
            <param name="bIntensity1"><see langword="true"/> if Intensity1 is transmitted</param>
            <param name="bIntensity2"><see langword="true"/> if Intensity2 is transmitted</param>
            <param name="barycenter1"><see langword="true"/> if Barycenter1 is transmitted</param>
            <param name="barycenter2"><see langword="true"/> if Barycenter2 is transmitted</param>
            <param name="bState"><see langword="true"/> if State is transmitted</param>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha1.Language">
            <summary>Language of the sensor software.</summary>
        </member>
        <member name="P:STIL_NET.sensorSPSAlpha1.ScanRate">
             <summary>Fixed acquisition rate identifier for a list of values defined in <see cref="T:STIL_NET.enFixedScanRates_DUO"/> enumeration</summary>
            <remarks>For free frequency, use the <see cref="P:STIL_NET.sensor.FreeFrequency"/> parameter</remarks>
        </member>
        <member name="T:STIL_NET.sensorSTILVizir">
            <summary>Class csensorSTILVizir</summary>
        </member>
        <member name="M:STIL_NET.sensorSTILVizir.#ctor(System.UInt16,STIL_NET.enDigitalOutputChannel,STIL_NET.sensorManager)">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.sensorSTILVizir.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="P:STIL_NET.sensorSTILVizir.ScanRate">
             <summary>Fixed acquisition rate identifier for a list of values defined in <see cref="T:STIL_NET.enFixedScanRates_STIL_VIZIR"/> enumeration</summary>
            <remarks>For free frequency, use the <see cref="P:STIL_NET.sensor.FreeFrequency"/> parameter</remarks>
        </member>
        <member name="T:STIL_NET.cAcqParam">
            <summary>
            cAcqParam class
            </summary>
        </member>
        <member name="F:STIL_NET.cAcqParam.NumberOfPoints">
            <summary>Number of points</summary> 
        </member>
        <member name="F:STIL_NET.cAcqParam.TriggerFlag">
            <summary>Trigger flag</summary>
            
        </member>
        <member name="F:STIL_NET.cAcqParam.TriggerType">
            <summary>Trigger type</summary> 
        </member>
        <member name="F:STIL_NET.cAcqParam.HighLevelOrRisingEdgeActivated">
            <summary>Type of edge</summary>  
        </member>
        <member name="F:STIL_NET.cAcqParam.NumberPointsTRE">
            <summary>Number of points in TRE mode</summary> 
        </member>
        <member name="F:STIL_NET.cAcqParam.NumberOfBuffers">
            <summary>Number of buffers</summary>
        </member>
        <member name="F:STIL_NET.cAcqParam.BufferLength">
            <summary>Buffer length</summary>
        </member>
        <member name="F:STIL_NET.cAcqParam.NumberOfPointsBeforeSignal">
            <summary>Number of points before signal event</summary>
        </member>
        <member name="F:STIL_NET.cAcqParam.EventAcquire_n_Points">
            <summary>Event EventAcquireNPoints compatible NET</summary> 
        </member>
        <member name="F:STIL_NET.cAcqParam.EventEndBuffer">
            <summary>Event EventEndBuffer compatible NET</summary>
        </member>
        <member name="F:STIL_NET.cAcqParam.EventEndMeasurement">
            <summary>Event EventEndMeasurement compatible NET</summary>
        </member>
        <member name="F:STIL_NET.cAcqParam.EventEndAcquire">
            <summary>Event EventEndAcquire compatible NET</summary>
        </member>
        <member name="F:STIL_NET.cAcqParam.EventStartingAcquisition">
            <summary>Event EventStartingAcquisition compatible NET</summary>
        </member>
        <member name="T:STIL_NET.cAcqParamNet">
            <summary>cAcqParamNet class</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.number_of_max_buffer">
            <summary>number of total buffers for each acquisition function</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.AcquisitionFifo">
            <summary>Acquisition float buffers queues</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.Len">
            <summary>Acquisition buffer length queue</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.SpectrumFifo">
            <summary>Spectrum queue</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.PtrArrayAcquisitionBuffer">
            <summary>Pointer to the buffer storage of data in unmanaged mode, remains to IntPtr.Zero if the buffer is not allocated.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.PtrArraySpectrumBuffer">
            <summary>Pointer to the buffer storage of data in unmanaged mode, remains to IntPtr.Zero if the buffer is not allocated.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.currentBitsRate">
            <summary>Current bit rate</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.NumberOfPoints">
            <summary>Number of points</summary>        
        </member>
        <member name="F:STIL_NET.cAcqParamNet.NumberPointsTRE">
            <summary>Number of points in TRE mode</summary> 
        </member>
        <member name="F:STIL_NET.cAcqParamNet.NumberOfBuffers">
            <summary>Number of buffers</summary>        
        </member>
        <member name="F:STIL_NET.cAcqParamNet.BufferLength">
            <summary>Buffer length</summary>        
        </member>
        <member name="F:STIL_NET.cAcqParamNet.NumberOfPointsBeforeSignal">
            <summary>Number of points before signal event</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EnableEvent">
            <summary><see langword="true"/>allows the event</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EnableBufferTransmittedData">
            <summary><see cref="T:STIL_NET.sEnableBufferTransmittedData"/> to activate the channels used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EnableBufferThickness">
            <summary><see cref="T:STIL_NET.sEnableBufferThickness"/> to activate the channels used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EnableBufferAltitude">
            <summary><see cref="T:STIL_NET.sEnableBufferAltitude"/> to activate the channels used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EnableBufferDepth">
            <summary><see cref="T:STIL_NET.sEnableBufferDepth"/> to activate the channels used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EnableBufferInterferometricThickness">
            <summary><see cref="T:STIL_NET.sEnableBufferDepth"/> to activate the channels used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EnableBufferInterferometricThicknessSAWLI">
            <summary><see cref="T:STIL_NET.sEnableBufferDepth"/> to activate the channels used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.Spectrum">
            <summary><see cref="T:STIL_NET.sSpectrumParameters"/> to activate the spectrum options used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.Trigger">
            <summary><see cref="T:STIL_NET.sTriggerParameters"/> to activate the trigger options used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EnableEncoder">
            <summary><see cref="T:STIL_NET.sEnableBufferEncoder"/> to activate the encoder options used to the acquisition.</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EnableAutoAdaptive">
            <summary>Enabled the acquisition AutoAdaptive</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.DigitalOutput">
            <summary>DigitalOutput</summary> 
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EventAcquireNPoints">
            <summary>Event EventAcquireNPoints compatible NET</summary>        
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EventEndBuffer">
            <summary>Event EventEndBuffer compatible NET</summary>        
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EventEndMeasurement">
            <summary>Event EventEndMeasurement compatible NET</summary>        
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EventEndAcquire">
            <summary>Event EventEndAcquire compatible NET</summary>        
        </member>
        <member name="F:STIL_NET.cAcqParamNet.EventStartingAcquisition">
            <summary>Event EventStartingAcquisition compatible NET</summary>        
        </member>
        <member name="F:STIL_NET.cAcqParamNet.BufferLengthDequeuedLen">
            <summary>.Net Buffer length Dequeued</summary>        
        </member>
        <member name="F:STIL_NET.cAcqParamNet.NumberOfDequeuedBufferLen">
            <summary>Number of dequeued buffer</summary>
        </member>
        <member name="F:STIL_NET.cAcqParamNet.SpectrumBufferLengthDequeuedLen">
            <summary>.Net Spectrum Buffer length Dequeued</summary> 
        </member>
        <member name="F:STIL_NET.cAcqParamNet.SpectrumNumberOfDequeuedBufferLen">
            <summary>Number of dequeued Spectrum buffer</summary>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.CreateUnmanagedMemory">
            <summary>Create the unmanaged memory for Win32 / DLL interface with DLL_CHR.</summary>
            <returns><see langword="true"/> if successfull, <see langword="false"/> in case of failure </returns>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.CopyUnmanagedMemory(STIL_NET.BufferManagement)">
            <summary>copy the unmanaged memory for Win32 / DLL interface with DLL_CHR.</summary>
            <param name="bufferManagement">class for buffer management</param>
            <returns><see langword="true"/> if successfull, <see langword="false"/> in case of failure </returns>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.ReleaseUnmanagedMemory">
            <summary>Release the unmanaged memory for Win32 / DLL interface with DLL_CHR</summary>
            <returns><see langword="true"/> if successfull, <see langword="false"/> in case of failure </returns>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.Copy(STIL_NET.cAcqParamNet@)">
            <summary>Copy current <see cref="T:STIL_NET.cAcqParamNet"/> to a destination.</summary>
            <param name="destination">.Net acquisition parameters <see cref="T:STIL_NET.cAcqParamNet"/></param>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.Clear">
            <summary>
            Clear the default parameters
            </summary>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.Convert(STIL_NET.cAcqParamMeasurement)">
            <summary>
            Convert User parameters to Net parameters
            </summary>
            <param name="source">User parameters</param>
            <returns>NET parameters</returns>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.Convert(STIL_NET.cAcqParamNet@)">
            <summary>
            Convert Net parameters to DLL CHR parameters
            </summary>
            <param name="source">Net parameters</param>
            <returns>Win32 parameters</returns>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.GetBufferLen(STIL_NET.cAcqParamNet@)">
            <summary>Copy a temporary buffer to a buffer</summary>
            <param name="paramNet">temporary buffer</param>
            <returns>buffer</returns>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.CopyBuffer(STIL_NET.cAcqParamNet@,System.Int32,System.Int32@)">
            <summary>Copy a temporary buffer to a buffer</summary>
            <param name="paramNet">temporary buffer</param>
            <param name="index">index of temporary buffer</param>
            <param name="len">length of temporary buffer</param>
            <returns>buffer</returns>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.DequeueBufferInTrash(STIL_NET.cAcqParamNet@,System.Int32)">
            <summary>Copy a temporary buffer to a buffer</summary>
            <param name="paramNet">temporary buffer</param>
            <param name="index">index of temporary buffer</param>
            <returns>buffer</returns>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.CopyBuffer(STIL_NET.cAcqParamNet@,System.Int32)">
            <summary>Copy a temporary buffer to a buffer</summary>
            <param name="paramNet">temporary buffer</param>
            <param name="index">index of temporary buffer</param>
            <returns>buffer</returns>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.CopyBuffer(STIL_NET.cAcqParamNet@,System.Int32,System.Int32)">
            <summary>Copy a temporary msb and lsb buffer to a buffer</summary>
            <param name="paramNet">temporary buffer</param>
            <param name="index_msb">index of temporary msb buffer</param>
            <param name="index_lsb">index of temporary lsb buffer</param>
            <returns>buffer</returns>
        </member>
        <member name="M:STIL_NET.cAcqParamNet.CopySpectrumBuffer(STIL_NET.cAcqParamNet@)">
            <summary>Copy a temporary buffer to a buffer</summary>
            <param name="paramNet">temporary buffer</param>
            <returns>buffer</returns>
        </member>
        <member name="E:STIL_NET.cAcqParamNet.OnError">
            <summary>error event</summary>
        </member>
        <member name="T:STIL_NET.cAcqParamNet.ErrorHandler">
            <summary>delagate for error event</summary>
        </member>
        <member name="T:STIL_NET.cAnalogOutputParameters">
            <summary>Class used for analog output.</summary>
        </member>
        <member name="P:STIL_NET.cAnalogOutputParameters.Index">
            <summary>
            Identifier of the analog output selected (0 or 1)
            </summary>
        </member>
        <member name="P:STIL_NET.cAnalogOutputParameters.Data">
            <summary>
            A pointer to the number of the data attributed to the analog output
            </summary>
        </member>
        <member name="P:STIL_NET.cAnalogOutputParameters.ZeroValue">
            <summary>
            Measuring scale of the data for which the output is 0V
            </summary>
        </member>
        <member name="P:STIL_NET.cAnalogOutputParameters.MaxValue">
            <summary>
            Measuring scale of the data for which the output is 10V
            </summary>
        </member>
        <member name="T:STIL_NET.cDoubleFrequencyParameters">
            <summary>Class used for double frequency mode.</summary>
        </member>
        <member name="P:STIL_NET.cDoubleFrequencyParameters.Enabled">
            <summary>Activate double frequency mode (false : not active, true : active).</summary>
        </member>
        <member name="P:STIL_NET.cDoubleFrequencyParameters.LowFrequency">
            <summary>Low Frequency</summary>
        </member>
        <member name="P:STIL_NET.cDoubleFrequencyParameters.HighFrequency">
            <summary>High Frequency</summary>
        </member>
        <member name="P:STIL_NET.cDoubleFrequencyParameters.IntensityNormalization">
            <summary>Intensity normalization (0 : no normalization, 1 : normalization)</summary>
        </member>
        <member name="T:STIL_NET.cSpectralCalibration">
            <summary>Class used for spectral calibration.</summary>
        </member>
        <member name="M:STIL_NET.cSpectralCalibration.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.cSpectralCalibration.#ctor(System.Int32)">
            <summary>Constructor</summary>
            <param name="CoeficientsArraySize">Size of coeficients array</param>
        </member>
        <member name="M:STIL_NET.cSpectralCalibration.Copy(STIL_NET.cSpectralCalibration,STIL_NET.cSpectralCalibration)">
            <summary>Copy a <see cref="T:STIL_NET.cSpectralCalibration"/></summary>
            <param name="source">Source of <see cref="T:STIL_NET.cSpectralCalibration"/></param>
            <param name="destination">Destination of <see cref="T:STIL_NET.cSpectralCalibration"/></param>
        </member>
        <member name="P:STIL_NET.cSpectralCalibration.CoeficientsArray">
            <summary>Array of coeficients</summary>
        </member>
        <member name="P:STIL_NET.cSpectralCalibration.CoeficientsArraySize">
            <summary>Size of coeficients array</summary>
        </member>
        <member name="T:STIL_NET.cSpectralRefractivesIndexes">
            <summary>Class used for spectral refractives indexes.</summary>
        </member>
        <member name="M:STIL_NET.cSpectralRefractivesIndexes.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.cSpectralRefractivesIndexes.#ctor(System.Int32)">
            <summary>Constructor</summary>
            <param name="CoeficientsArraySize">Size of coeficients array</param>
        </member>
        <member name="M:STIL_NET.cSpectralRefractivesIndexes.Copy(STIL_NET.cSpectralRefractivesIndexes,STIL_NET.cSpectralRefractivesIndexes)">
            <summary>Copy a <see cref="T:STIL_NET.cSpectralRefractivesIndexes"/></summary>
            <param name="source">Source of <see cref="T:STIL_NET.cSpectralRefractivesIndexes"/></param>
            <param name="destination">Destination of <see cref="T:STIL_NET.cSpectralRefractivesIndexes"/></param>
        </member>
        <member name="P:STIL_NET.cSpectralRefractivesIndexes.CoeficientsArray">
            <summary>Array of coeficients</summary>
        </member>
        <member name="P:STIL_NET.cSpectralRefractivesIndexes.CoeficientsArraySize">
            <summary>Size of coeficients array</summary>
        </member>
        <member name="T:STIL_NET.cThicknessDetectionThreshold">
            <summary>Class used for thickness detection threshold.</summary>
        </member>
        <member name="P:STIL_NET.cThicknessDetectionThreshold.FirstPeakThreshold">
            <summary>Detection threshold for the first (stronger) peak</summary>
        </member>
        <member name="P:STIL_NET.cThicknessDetectionThreshold.SecondPeakThreshold">
            <summary>Detection threshold for the second (weaker) peak</summary>
        </member>
        <member name="T:STIL_NET.MCHR_FILE_DATA_EX">
            <summary>
            Structure des propriétés des fichiers lus par le lien FTP
            </summary>
        </member>
        <member name="F:STIL_NET.MCHR_FILE_DATA_EX.IsDirectory">
            <summary>Destination Directory of sent file.</summary>
        </member>
        <member name="F:STIL_NET.MCHR_FILE_DATA_EX.FileSize">
            <summary>Size of sent file.</summary>
        </member>
        <member name="F:STIL_NET.MCHR_FILE_DATA_EX.FileName">
            <summary>Name of sent file.</summary>
        </member>
        <member name="F:STIL_NET.MCHR_FILE_DATA_EX.CreationTime">
            <summary>Creation time of sent file.</summary>
        </member>
        <member name="T:STIL_NET.cFileData">
            <summary>
            Classe d'équivalence de la structure  <seealso cref="T:STIL_NET.MCHR_FILE_DATA_EX"/>, propriétés des fichiers lus par le lien FTP.
            </summary>
        </member>
        <member name="F:STIL_NET.cFileData.IsDirectory">
            <summary>Destination Directory of sent file.</summary>
        </member>
        <member name="F:STIL_NET.cFileData.FileSize">
            <summary>Size of sent file.</summary>
        </member>
        <member name="F:STIL_NET.cFileData.FileName">
            <summary>Name of sent file.</summary>
        </member>
        <member name="F:STIL_NET.cFileData.CreationTime">
            <summary>Creation time of sent file.</summary>
        </member>
        <member name="M:STIL_NET.cFileData.Copy(STIL_NET.MCHR_FILE_DATA_EX)">
            <summary>
            Copie de la structure  <seealso cref="T:STIL_NET.MCHR_FILE_DATA_EX"/> vers les propriété équivalente de la classe courante.
            </summary>
            <param name="data">Données d'entrée de type <seealso cref="T:STIL_NET.MCHR_FILE_DATA_EX"/></param>
        </member>
        <member name="T:STIL_NET.enSpectralRange">
            <summary>
            Spectral range that controller support
            </summary>
        </member>
        <member name="F:STIL_NET.enSpectralRange.SR_VISIBLE">
            <summary>
            Visible spectral
            </summary>
        </member>
        <member name="F:STIL_NET.enSpectralRange.SR_NIR">
            <summary>
            Near infra red spectral
            </summary>
        </member>
        <member name="F:STIL_NET.enSpectralRange.SR_VISIBLE_NIR">
            <summary>
            Near infra red spectral
            </summary>
        </member>
        <member name="T:STIL_NET.enLightSourceType">
            <summary>
            Type of light sources
            </summary>
        </member>
        <member name="F:STIL_NET.enLightSourceType.LS_LAMP">
            <summary>
            Lamp type (not modulable)
            </summary>
        </member>
        <member name="F:STIL_NET.enLightSourceType.LS_LED">
            <summary>
            LED type (modulable)
            </summary>
        </member>
        <member name="F:STIL_NET.enLightSourceType.LS_NOT_USED">
            <summary>
            LED type (modulable)
            </summary>
        </member>
        <member name="T:STIL_NET.enSensorError">
            <summary>List of the sensor error.</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR">
            <summary>The function is in error</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_NONE">
            <summary>No ERROR, the function is OK</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_CODE">
            <summary>Starting of ERROR CODE</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_CODE_PARAMETERS">
            <summary>Starting of ERROR CODE PARAMETERS</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_NOT_CONNECTED">
            <summary>Error encountered when trying to communicate with the CHR</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_SERIAL_PORT">
            <summary>Error encountered when trying to initialize the specified COM PORT</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_READ_CONFIG_FILE">
            <summary>Error encountered when trying to read the specified confoguration file</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_WRITE_CONFIG_FILE">
            <summary>Error encountered when trying to write the specified configuration file</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_RECEIVE_CONFIG_CHR">
            <summary>Error encountered when trying to get the CHR configuration</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_SEND_CONFIG_CHR">
            <summary>Error encountered during  CHR configuration transmission</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_NAME_ALREADY_EXIST">
            <summary>The name of the specified CHR exist already in the list of initialized CHR</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_ADD_SENSOR">
            <summary>Error while adding a new CHR</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_UNKNOWN_SENSOR">
            <summary>The specified CHR does not exist in the list of initialized CHR</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_NO_SENSOR_CONNECTED">
            <summary>No CHR is currently connected</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_PARAM_NOT_VALID">
            <summary>Invalid argument for the required function</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_DIALOG_CHR">
            <summary>Dialog error encountered while communicationg with the CHR</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_START_RECEP_THREAD">
            <summary>Error encountered while initializing the Reception Thread</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_NOTHING_TO_ABORT">
            <summary>No command is being executed while "Abort" command is received</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_ABORT_COMMAND">
            <summary>Abort command failed</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_DLL_NOT_ACTIVE">
            <summary>The DLL has not been initialized and activated</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_CHR_BUSY">
            <summary>The DLL is busy executing a previous command</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_SCANRATE_TOO_HIGH">
            <summary>The acquisition rate is too high, impossible to transmit all requested data at this rate</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_ONLY_CHR450_FUNCTION">
            <summary>The specified function is autorized for CHR 450 only, the current CHR is not a 450</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_ACQUISTION_STOPPED">
            <summary>No acquisition is currently in progress</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_INTERNAL_FUNCTION">
            <summary>Unspecified error during function execution</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_NOT_IN_INTERFEROMETRIC_MODE">
            <summary>he specified function is autorized on interferometric mode only, the CHR is not in this mode</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_DARK_NOT_VALID">
            <summary>Error during "Fast Dark" command execution</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_INTERFEROMETRIC_MODE_NOT_AUTHORIZED">
            <summary>The interferometric mode is not authorized with this sensor</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_NOT_VALID_CHR_CMD">
            <summary>The command is not authorized for the current sensor type</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_READ_CALIBRATION_FILE">
            <summary>Impossible to read calibration file</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_SEND_CALIBRATION_TABLE">
            <summary>Impossible to send the calibration file</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_IP_ADDRESS">
            <summary>Illegal IP address</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_BUFFER_FULL">
            <summary>Reception buffer overflow, reading rate is too slow</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_TRIGGER_TYPE">
            <summary>Unrecognized trigger type</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_READ_FIRMWARE_FILE">
            <summary>Impossible to read the firmware file</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_READ_ADDITIONAL_FILE">
            <summary>Impossible to read the menu file</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_SEND_FIRMWARE_FILE">
            <summary>Impossible to send the firmware file</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_SEND_ADDITIONAL_FILE">
            <summary>Impossible to send the menu file</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_RUN_FIRMWARE">
            <summary>Error while trying to run the new firmware version</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_SAVE_FIRMWARE">
            <summary>Error while trying to save the new firmware version</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_RESTART_CHR">
            <summary>Error while trying restart the sensor after saving the new firmware version</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_ONLY_CHR150_FUNCTION">
            <summary>The specified function is autorized for CHR 150 only, the current CHR is not a 150</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_ONLY_CCS_FUNCTION">
            <summary>The specified function is autorized for CCS only, the current CHR is not a 150</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_NO_TRANSMITTED_DATA">
            <summary>No data item is configured to be transmitted on current digital output channel</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_ETHERNET_NOT_SUPPORTED">
            <summary>The Ethernet link is not supported on this sensor</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_SEND_SERIAL_NUMBER">
            <summary>Failed to send Serial Number</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_ONLY_ILB_FUNCTION">
            <summary>The specified function is autorized for an ILB sensor</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_FUNCTION_NOT_AVAILABLE">
            <summary>The specified function is not available on the device</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_FREQUENCY_TOO_HIGH">
            <summary>Frequency too high</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_FREQUENCY_TOO_LOW">
            <summary>Frequency too low</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_WHITE_TOO_HIGH">
            <summary>Error during "White Acquisition" command execution : the signal is too high</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_WHITE_TOO_LOW">
            <summary>Error during "White Acquisition" command execution : the signal is too low</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_WHITE_SATURED">
            <summary>Error during "White Acquisition" command execution : the signal is satured</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_ONLY_ETHERNET_CONNECTION">
            <summary>The function is avalaible only for an ethernet connection</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_ILB_PARAM">
            <summary>Error during setting / getting ILB parameters</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_NOT_CHR150_FUNCTION">
            <summary>The specified function is unautorized for CHR 150</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_TO_START_WHITE_REF_ACQ">
            <summary>Failure to start the acquisition of WhiteRef</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_TO_STOP_WHITE_REF_ACQ">
            <summary>Failure to stop the acquisition of WhiteRef</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_UNAUTHORIZED_ACCESS">
            <summary>Permission access</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_FREQ_SMALLER_THAN_MIN_DARK_FREQ">
            <summary>Failure the resquested frequency is smaller then the min dark frequency</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_UNKNOWN">
            <summary>Failure to stop the acquisition of WhiteRef</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_EXCEPTION">
            <summary>Exception try/catch</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_MISSING_PARAMETERS">
            <summary>one or more parameters are missing</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_SENSOR_TYPE">
            <summary>Sensor missing or not compatible</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_TOO_MANY_PARAMETERS">
            <summary>Too many parameters</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_MEMORY_MANAGEMENT">
            <summary>Memory management</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_NOTHING_TO_READ">
            <summary>Nothing to read (acquisition process)</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_BAD_PARAMETERS">
            <summary>one or more parameters are wrong</summary>
        </member>
        <member name="F:STIL_NET.enSensorError.MCHR_ERROR_NO_DATA">
            <summary>No data received in buffer</summary>
        </member>
        <member name="T:STIL_NET.enDigitalOutputFormat">
            <summary>Device list used to identify STIL sensors.</summary>
        </member>
        <member name="F:STIL_NET.enDigitalOutputFormat.MCHR_ASCII">
            <summary> ASCII data format.</summary>
        </member>
        <member name="F:STIL_NET.enDigitalOutputFormat.MCHR_BINARY">
            <summary> Binary data format.</summary>
        </member>
        <member name="F:STIL_NET.enDigitalOutputFormat.MCHR_PACKET">
            <summary> Data transfered using packets. Only for STIL-DUO and CHR-450.</summary>
        </member>
        <member name="F:STIL_NET.enDigitalOutputFormat.MCHR_MAX_FORMAT">
            <summary>Limit number of data types.</summary>
        </member>
        <member name="T:STIL_NET.enSensorType">
            <summary>Device list used to identify STIL sensors.</summary>
        </member>
        <member name="F:STIL_NET.enSensorType.CHR_150">
            <summary>
            CHR 150
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.CHR_450">
            <summary>
            CHR 450
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.CHR_XE">
            <summary>
            CHR_XE
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.CHR_XE_E">
            <summary>
            CHR_XE_E
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.CCS_ALPHA">
            <summary>
            CCS ALPHA
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.CCS_PRIMA">
            <summary>
            CCS PRIMA
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.CCS_OPTIMA">
            <summary>
            CCS OPTIMA
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.CCS_OPTIMA_PLUS">
            <summary>
            CCS OPTIMA PLUS
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.CCS_ULTIMA">
            <summary>
            CCS ULTIMA
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.STIL_VIZIR">
            <summary>
            STIL VIZIR
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.STIL_INITIAL">
            <summary>
            STIL INITIAL
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.SPS_ALPHA">
            <summary>
            SPS ALPHA
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.MTS_DUO">
            <summary>
            MTS DUO
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.MTS_TRIO">
            <summary>
            MTS TRIO
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.NCS_RUBY">
            <summary>
            RUBY
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.SPS_ALPHA_1">
            <summary>
            SPS ALPHA 1
            </summary>
        </member>
        <member name="F:STIL_NET.enSensorType.CCS_EXTREMA">
            <summary>
            CCS EXTREMA
            </summary>
        </member>
        <member name="T:STIL_NET.enLanguage">
            <summary>Controller connection types.</summary>
        </member>
        <member name="F:STIL_NET.enLanguage.English">
            <summary>English language</summary>
        </member>
        <member name="F:STIL_NET.enLanguage.French">
            <summary>French language</summary>
        </member>
        <member name="T:STIL_NET.enChrConnection">
            <summary>Controller connection types.</summary>
        </member>
        <member name="F:STIL_NET.enChrConnection.MCHR_SERIAL_CONNECTION">
            <summary>Serial communication</summary>
        </member>
        <member name="F:STIL_NET.enChrConnection.MCHR_ETHERNET_CONNECTION">
            <summary>Ethernet communication</summary>
        </member>
        <member name="F:STIL_NET.enChrConnection.MCHR_USB_CONNECTION">
            <summary>Usb communication</summary>
        </member>
        <member name="T:STIL_NET.enProtocolType">
            <summary>Protocol connection types.</summary>
        </member>
        <member name="F:STIL_NET.enProtocolType.Serial">
            <summary>Serial protocole</summary>
        </member>
        <member name="F:STIL_NET.enProtocolType.Ethernet">
            <summary>Ethernet protocole</summary>
        </member>
        <member name="F:STIL_NET.enProtocolType.USB">
            <summary>USB protocole</summary>
        </member>
        <member name="T:STIL_NET.enDigitalOutputChannel">
            <summary>Protocol list where data can be sent.</summary>
        </member>
        <member name="F:STIL_NET.enDigitalOutputChannel.NO_TRANSMIT">
            <summary>Data is not transmitted</summary>
        </member>
        <member name="F:STIL_NET.enDigitalOutputChannel.MAIN_SERIAL">
            <summary>Data is not transmitted through main serial port (RS232)</summary>
        </member>
        <member name="F:STIL_NET.enDigitalOutputChannel.AUX_SERIAL">
            <summary>Disabled</summary>
        </member>
        <member name="F:STIL_NET.enDigitalOutputChannel.USB">
            <summary>Data is transmitted through USB port</summary>
        </member>
        <member name="F:STIL_NET.enDigitalOutputChannel.ETHERNET">
            <summary>Data is transmitted through ethernet port</summary>
        </member>
        <member name="T:STIL_NET.enTriggerType">
            <summary>Trigger type description</summary>
        </member>
        <member name="F:STIL_NET.enTriggerType.NONE">
            <summary>Trigger is disabled (continuous measurement)</summary>
        </member>
        <member name="F:STIL_NET.enTriggerType.TRG">
            <summary>Start when a Trig pulse is received, do not re-arm</summary>
        </member>
        <member name="F:STIL_NET.enTriggerType.TRS">
            <summary>Start/Stop measurement upon successive Trig pulses, then re-arm</summary>
        </member>
        <member name="F:STIL_NET.enTriggerType.TRE">
            <summary>Latch n-points when a Trig pulse is received, and then re-arm</summary>
        </member>
        <member name="F:STIL_NET.enTriggerType.TRN">
            <summary>Start/Stop measurement upon Trig-signal state, and then re-arm</summary>
        </member>
        <member name="T:STIL_NET.enLevelEdgeFlag">
            <summary>Level edge used for trigger purpose.</summary>
        </member>
        <member name="F:STIL_NET.enLevelEdgeFlag.RISING_EDGE">
            <summary>Triggered on rising edge</summary>
        </member>
        <member name="F:STIL_NET.enLevelEdgeFlag.FALLING_EDGE">
            <summary>Triggered on falling edge</summary>
        </member>
        <member name="T:STIL_NET.enFixedScanRates">
            <summary>Scan rate list for CHR150 devices</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates.FREE_FREQUENCY">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates.CHR150_30HZ">
            <summary>30Hz predefined scanrate for CHR-150.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates.CHR150_100HZ">
            <summary>100Hz predefined scanrate for CHR-150.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates.CHR150_300HZ">
            <summary>300Hz predefined scanrate for CHR-150.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates.CHR150_1000HZ">
            <summary>1000Hz predefined scanrate for CHR-150.</summary>
        </member>
        <member name="T:STIL_NET.enFixedScanRates_CCS_PRIMA">
            <summary>Scan rate list for all CCS_PRIMA devices.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_PRIMA.CCS_PRIMA_FREE">
            <summary>Free frequency</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_PRIMA.CCS_PRIMA_100HZ">
            <summary>100 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_PRIMA.CCS_PRIMA_200HZ">
            <summary>200 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_PRIMA.CCS_PRIMA_400HZ">
            <summary>400 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_PRIMA.CCS_PRIMA_1000HZ">
            <summary>1000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_PRIMA.CCS_PRIMA_2000HZ">
            <summary>2000 Hz frequency fixed.</summary>
        </member>
        <member name="T:STIL_NET.enFixedScanRates_STIL_VIZIR">
            <summary>Scan rate list for all STIL_VIZIR devices.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_STIL_VIZIR.STIL_VIZIR_FREE">
            <summary>Free frequency</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_STIL_VIZIR.STIL_VIZIR_10HZ">
            <summary>10 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_STIL_VIZIR.STIL_VIZIR_25HZ">
            <summary>25 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_STIL_VIZIR.STIL_VIZIR_50HZ">
            <summary>50 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_STIL_VIZIR.STIL_VIZIR_100HZ">
            <summary>100 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_STIL_VIZIR.STIL_VIZIR_250HZ">
            <summary>250 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_STIL_VIZIR.STIL_VIZIR_500HZ">
            <summary>500 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_STIL_VIZIR.STIL_VIZIR_1000HZ">
            <summary>1000 Hz frequency fixed.</summary>
        </member>
        <member name="T:STIL_NET.enFixedScanRates_CCS_INITIAL">
            <summary>Scan rate list for all CCS_INITIAL devices.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_INITIAL.CCS_INITIAL_FREE">
            <summary>Free frequency</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_INITIAL.CCS_INITIAL_100HZ">
            <summary>100 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_INITIAL.CCS_INITIAL_200HZ">
            <summary>200 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_INITIAL.CCS_INITIAL_400HZ">
            <summary>400 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_INITIAL.CCS_INITIAL_1000HZ">
            <summary>1000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_INITIAL.CCS_INITIAL_2000HZ">
            <summary>2000 Hz frequency fixed.</summary>
        </member>
        <member name="T:STIL_NET.enFixedScanRates_CCS_OPTIMA">
            <summary>Scan rate list for all CCS_OPTIMA devices.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA.CCS_OPTIMA_FREE">
            <summary>Free frequency</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA.CCS_OPTIMA_100HZ">
            <summary>100 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA.CCS_OPTIMA_200HZ">
            <summary>200 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA.CCS_OPTIMA_500HZ">
            <summary>500 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA.CCS_OPTIMA_1000HZ">
            <summary>1000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA.CCS_OPTIMA_2000HZ">
            <summary>2000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA.CCS_OPTIMA_5000HZ">
            <summary>5000 Hz frequency fixed.</summary>
        </member>
        <member name="T:STIL_NET.enFixedScanRates_CCS_OPTIMA_PLUS">
            <summary>Scan rate list for all CCS_OPTIMA_PLUS devices.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA_PLUS.CCS_OPTIMA_PLUS_FREE">
            <summary>Free frequency</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA_PLUS.CCS_OPTIMA_PLUS_250HZ">
            <summary>250 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA_PLUS.CCS_OPTIMA_PLUS_500HZ">
            <summary>500 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA_PLUS.CCS_OPTIMA_PLUS_1000HZ">
            <summary>1000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA_PLUS.CCS_OPTIMA_PLUS_2000HZ">
            <summary>2000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA_PLUS.CCS_OPTIMA_PLUS_5000HZ">
            <summary>5000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_OPTIMA_PLUS.CCS_OPTIMA_PLUS_10000HZ">
            <summary>10000 Hz frequency fixed.</summary>
        </member>
        <member name="T:STIL_NET.enFixedScanRates_CCS_EXTREMA">
            <summary>Scan rate list for all CCS_EXTREMA devices.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_EXTREMA.CCS_EXTREMA_FREE">
            <summary>Free frequency</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_EXTREMA.CCS_EXTREMA_500HZ">
            <summary>500 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_EXTREMA.CCS_EXTREMA_1000HZ">
            <summary>1000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_EXTREMA.CCS_EXTREMA_2000HZ">
            <summary>2000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_EXTREMA.CCS_EXTREMA_5000HZ">
            <summary>5000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_EXTREMA.CCS_EXTREMA_10000HZ">
            <summary>10000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_EXTREMA.CCS_EXTREMA_15625HZ">
            <summary>15625 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_EXTREMA.CCS_EXTREMA_20000HZ">
            <summary>20000 Hz frequency fixed.</summary>
        </member>
        <member name="T:STIL_NET.enFixedScanRates_CCS_ULTIMA">
            <summary>Scan rate list for all CCS_ULTIMA devices.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_ULTIMA.CCS_ULTIMA_FREE">
            <summary>Free frequency</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_ULTIMA.CCS_ULTIMA_500HZ">
            <summary>500 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_ULTIMA.CCS_ULTIMA_1000HZ">
            <summary>1000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_ULTIMA.CCS_ULTIMA_2000HZ">
            <summary>2000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_ULTIMA.CCS_ULTIMA_5000HZ">
            <summary>5000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_ULTIMA.CCS_ULTIMA_10000HZ">
            <summary>10000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_ULTIMA.CCS_ULTIMA_15625HZ">
            <summary>15625 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_ULTIMA.CCS_ULTIMA_20000HZ">
            <summary>20000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_ULTIMA.CCS_ULTIMA_25000HZ">
            <summary>25000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_CCS_ULTIMA.CCS_ULTIMA_31250HZ">
            <summary>31250 Hz frequency fixed.</summary>
        </member>
        <member name="T:STIL_NET.enFixedScanRates_SPS_ALPHA">
            <summary>Scan rate list for all SPS_ALPHA devices.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_SPS_ALPHA.SPS_ALPHA_FREE">
            <summary>Free frequency</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_SPS_ALPHA.SPS_ALPHA_250HZ">
            <summary>250 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_SPS_ALPHA.SPS_ALPHA_500HZ">
            <summary>500 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_SPS_ALPHA.SPS_ALPHA_1000HZ">
            <summary>1000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_SPS_ALPHA.SPS_ALPHA_2000HZ">
            <summary>2000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_SPS_ALPHA.SPS_ALPHA_5000HZ">
            <summary>5000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_SPS_ALPHA.SPS_ALPHA_10000HZ">
            <summary>10000 Hz frequency fixed.</summary>
        </member>
        <member name="T:STIL_NET.enFixedScanRates_SPS_ALPHA_1">
            <summary>Scan rate list for all SPS_ALPHA_1 devices</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_SPS_ALPHA_1.SPS_ALPHA_1_FREE">
            <summary>Free frequency</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_SPS_ALPHA_1.SPS_ALPHA_1_100HZ">
            <summary>100 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_SPS_ALPHA_1.SPS_ALPHA_1_200HZ">
            <summary>200 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_SPS_ALPHA_1.SPS_ALPHA_1_400HZ">
            <summary>400 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_SPS_ALPHA_1.SPS_ALPHA_1_1000HZ">
            <summary>1000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_SPS_ALPHA_1.SPS_ALPHA_1_2000HZ">
            <summary>2000 Hz frequency fixed.</summary>
        </member>
        <member name="T:STIL_NET.enFixedScanRates_DUO">
            <summary>Scan rate list for all DUO devices</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_DUO.DUO_FREE">
            <summary>Free frequency</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_DUO.DUO_40HZ">
            <summary>40 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_DUO.DUO_100HZ">
            <summary>100 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_DUO.DUO_200HZ">
            <summary>200 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_DUO.DUO_400HZ">
            <summary>400 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_DUO.DUO_1000HZ">
            <summary>1000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_DUO.DUO_2000HZ">
            <summary>2000 Hz frequency fixed.</summary>
        </member>
        <member name="T:STIL_NET.enFixedScanRates_RUBY">
            <summary>Scan rate list for all RUBY devices</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_RUBY.RUBY_FREE">
            <summary>Free frequency</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_RUBY.RUBY_4HZ">
            <summary>4 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_RUBY.RUBY_10HZ">
            <summary>10 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_RUBY.RUBY_20HZ">
            <summary>20 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_RUBY.RUBY_40HZ">
            <summary>40 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_RUBY.RUBY_100HZ">
            <summary>100 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_RUBY.RUBY_200HZ">
            <summary>200 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_RUBY.RUBY_400HZ">
            <summary>400 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_RUBY.RUBY_1000HZ">
            <summary>1000 Hz frequency fixed.</summary>
        </member>
        <member name="F:STIL_NET.enFixedScanRates_RUBY.RUBY_2000HZ">
            <summary>2000 Hz frequency fixed.</summary>
        </member>
        <member name="T:STIL_NET.enPeakSelectionMode">
            <summary>Peak selection mode.</summary>
        </member>
        <member name="F:STIL_NET.enPeakSelectionMode.MCHR_HIGH_PEAK">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enPeakSelectionMode.MCHR_FIRST_PEAK">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enPeakSelectionMode.MCHR_LAST_PEAK">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enPeakSelectionMode.MCHR_MAX_PEAK_MODE">
            <summary></summary>
        </member>
        <member name="T:STIL_NET.enAutoDarkMode">
            <summary>Auto Dark mode.</summary>
        </member>
        <member name="F:STIL_NET.enAutoDarkMode.MCHR_MANUAL_DARK">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enAutoDarkMode.MCHR_AUTO_DARK">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enAutoDarkMode.MCHR_MAX_AUTO_DARK_MODE">
            <summary></summary>
        </member>
        <member name="T:STIL_NET.enLedType">
            <summary>Led type.</summary>
        </member>
        <member name="F:STIL_NET.enLedType.MCHR_CCS_LED_NO_SOURCE">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enLedType.MCHR_CCS_LED_INNER">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enLedType.MCHR_CCS_HALOGEN">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enLedType.MCHR_CCS_LED_XENON">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enLedType.MCHR_LED_OUTER">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enLedType.MCHR_LED_INNER">
            <summary></summary>
        </member>
        <member name="T:STIL_NET.enSecondPeakHandling">
            <summary>Second peak handling.</summary>
        </member>
        <member name="F:STIL_NET.enSecondPeakHandling.MCHR_SECOND_PEAK_NULL">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enSecondPeakHandling.MCHR_SECOND_PEAK_IS_PEAK_ONE">
            <summary></summary>
        </member>
        <member name="T:STIL_NET.enMeasureMode">
            <summary>
            Measure Mode List
            </summary>
        </member>
        <member name="F:STIL_NET.enMeasureMode.DISTANCE_MODE">
            <summary>1 Surface mode</summary>
        </member>
        <member name="F:STIL_NET.enMeasureMode.THICKNESS_MODE">
            <summary>2 Surfaces mode</summary>
        </member>
        <member name="F:STIL_NET.enMeasureMode.SAWLI_THICKNESS_MODE">
            <summary>White light interferometry thickness</summary>
        </member>
        <member name="F:STIL_NET.enMeasureMode.SAWLI_DISTANCE_MODE">
            <summary>White light interferometry distance</summary>
        </member>
        <member name="F:STIL_NET.enMeasureMode.XYZ_MODE">
            <summary>Spectrometric measurement using XYZ scaling. Only for NCS-RUBY</summary>
        </member>
        <member name="F:STIL_NET.enMeasureMode.Yxy_MODE">
            <summary>Spectrometric measurement using yxy scaling. Only for NCS-RUBY</summary>
        </member>
        <member name="F:STIL_NET.enMeasureMode.RGB_MODE">
            <summary>Spectrometric measurement using RGB scaling. Only for NCS-RUBY</summary>
        </member>
        <member name="F:STIL_NET.enMeasureMode.Lab_MODE">
            <summary>Spectrometric measurement using Lab scaling. Only for NCS-RUBY</summary>
        </member>
        <member name="F:STIL_NET.enMeasureMode.Luv_MODE">
            <summary>Spectrometric measurement using Luv scaling. Only for NCS-RUBY</summary>
        </member>
        <member name="F:STIL_NET.enMeasureMode.LCh_ab_MODE">
            <summary>Spectrometric measurement using LChab scaling. Only for NCS-RUBY</summary>
        </member>
        <member name="F:STIL_NET.enMeasureMode.W_MODE">
            <summary>Spectrometric measurement using W scaling. Only for NCS-RUBY</summary>
        </member>
        <member name="T:STIL_NET.enSignalType">
            <summary>Signals types.</summary>
        </member>
        <member name="F:STIL_NET.enSignalType.MCHR_NOT_SIGNAL">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enSignalType.MCHR_RAW_SIGNAL">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enSignalType.MCHR_PRETREATED_SIGNAL">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enSignalType.MCHR_DARK_SIGNAL">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enSignalType.MCHR_WHITEREF_SIGNAL">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enSignalType.MCHR_LOOKUP_TABLE">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enSignalType.MCHR_REFRACTIVE_INDEX">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enSignalType.MCHR_OPTICAL_DARK">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enSignalType.MCHR_ELECTRONIC_DARK">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enSignalType.MCHR_NORMALIZATION_WHITE">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enSignalType.MCHR_REFERENCE_SIGNAL">
            <summary></summary>
        </member>
        <member name="F:STIL_NET.enSignalType.MCHR_MAX_SIGNAL">
            <summary></summary>
        </member>
        <member name="T:STIL_NET.enAcqEventType">
            <summary>
            Events used for <see cref="M:STIL_NET.sensor.GetLastWrittenBuffer(STIL_NET.enAcqEventType,System.Int32@,System.Int32@)"/>
            </summary>
        </member>
        <member name="F:STIL_NET.enAcqEventType.ONE_STEP_EVENT">
            <summary>Corresponds to EventAcquire_n_Points of this structure.</summary>
        </member>
        <member name="F:STIL_NET.enAcqEventType.BUFFER_EVENT">
            <summary>Corresponds to EventEndBuffer of the acquisition parameter structure.</summary>
        </member>
        <member name="F:STIL_NET.enAcqEventType.END_MEASUREMENT">
            <summary>Corresponds to EventEndMeasurement of this structure.</summary>
        </member>
        <member name="F:STIL_NET.enAcqEventType.MAX_EVENT_TYPE">
            <summary>Max event type of this structure.</summary>
        </member>
        <member name="T:STIL_NET.enRealTimeSignalType">
            <summary>
            Selection of spectrum type send in real time
            </summary>
        </member>
        <member name="F:STIL_NET.enRealTimeSignalType.REALTIME_NO_SIGNAL">
            <summary>No spectrum</summary>
        </member>
        <member name="F:STIL_NET.enRealTimeSignalType.REALTIME_RAW_SIGNAL">
            <summary>Spectrum raw</summary>
        </member>
        <member name="F:STIL_NET.enRealTimeSignalType.REALTIME_PRETRAITED_SIGNAL">
            <summary>Spectrum pre-treated</summary>
        </member>
        <member name="T:STIL_NET.enSpectrumAcquisitionResult">
            <summary>
            Definition of possible states of the spectrum acquisition used for <see cref="M:STIL_NET.sensor.GetSpectrumAcquisitionData(System.UInt16[]@,System.UInt16,System.UInt16@,STIL_NET.enSpectrumAcquisitionResult@,System.Int32)"/>
            </summary>
        </member>
        <member name="F:STIL_NET.enSpectrumAcquisitionResult.SPECTRUM_ACQUISITION_DATA_READY">
            <summary>Spectrum data present.</summary>
        </member>
        <member name="F:STIL_NET.enSpectrumAcquisitionResult.SPECTRUM_ACQUISITION_BUFFER_EMPTY">
            <summary>No spectrum data present.</summary>
        </member>
        <member name="F:STIL_NET.enSpectrumAcquisitionResult.SPECTRUM_ACQUISITION_ERROR">
            <summary>Spectrum acquisition error.</summary>
        </member>
        <member name="F:STIL_NET.enSpectrumAcquisitionResult.SPECTRUM_ACQUISITION_TIMEOUT">
            <summary>Spectrum timeout.</summary>
        </member>
        <member name="T:STIL_NET.enAcquisitionFunction">
            <summary>Acquisition function type.</summary>
        </member>
        <member name="F:STIL_NET.enAcquisitionFunction.MCHR_GetThicknessMeasurement">
            <summary>Thickness Measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcquisitionFunction.MCHR_GetAltitudeMeasurement">
            <summary>Altitude Measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcquisitionFunction.MCHR_GetDepthMeasurement">
            <summary>Depth Measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcquisitionFunction.MCHR_GetTransmittedDataMeasurement">
            <summary>Transmitted Data Measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcquisitionFunction.MCHR_GetInterferometricThickness">
            <summary>Interferometric Thickness</summary>
        </member>
        <member name="F:STIL_NET.enAcquisitionFunction.MCHR_GetInterferometricThicknessSAWLI">
            <summary>Interferometric Thickness SAWLI</summary>
        </member>
        <member name="T:STIL_NET.enAcqEncodersMeasurementType">
            <summary>Acquisition depth measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqEncodersMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqEncodersMeasurementType.Encoder1">
            <summary>Encoder1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqEncodersMeasurementType.Encoder2">
            <summary>Encoder2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqEncodersMeasurementType.Encoder3">
            <summary>Encoder3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqEncodersMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqAutoAdaptativeMeasurementType">
            <summary>Acquisition depth measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqAutoAdaptativeMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqAutoAdaptativeMeasurementType.AutoAdaptative">
            <summary>AutoAdaptative measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqAutoAdaptativeMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqDepthMeasurementType">
            <summary>Acquisition depth measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqDepthMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqDepthMeasurementType.Depth">
            <summary>Depth measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDepthMeasurementType.Intensity">
            <summary>Intensity measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDepthMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDepthMeasurementType.BaryCenter">
            <summary>Barycenter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDepthMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDepthMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqAltitudeMeasurementType">
            <summary>Acquisition altitude measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqAltitudeMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqAltitudeMeasurementType.Altitude">
            <summary>Altitude measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqAltitudeMeasurementType.Intensity">
            <summary>Intensity measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqAltitudeMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqAltitudeMeasurementType.BaryCenter">
            <summary>Barycenter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqAltitudeMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqAltitudeMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqThicknessMeasurementType">
            <summary>Acquisition thickness measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqThicknessMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqThicknessMeasurementType.Thickness">
            <summary>Thickness measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqThicknessMeasurementType.Distance1">
            <summary>Distance1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqThicknessMeasurementType.Intensity1">
            <summary>Intensity1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqThicknessMeasurementType.BaryCenter1">
            <summary>BaryCenter1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqThicknessMeasurementType.Distance2">
            <summary>Distance2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqThicknessMeasurementType.Intensity2">
            <summary>Intensity2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqThicknessMeasurementType.BaryCenter2">
            <summary>BaryCenter2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqThicknessMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqThicknessMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqThicknessMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqInterferometricThicknessSAWLIType">
            <summary>Acquisition thickness measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessSAWLIType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessSAWLIType.Thickness1">
            <summary>Thickness1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessSAWLIType.Thickness2">
            <summary>Thickness2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessSAWLIType.Thickness3">
            <summary>Thickness3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessSAWLIType.Quality1">
            <summary>Quality1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessSAWLIType.Quality2">
            <summary>Quality2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessSAWLIType.Quality3">
            <summary>Quality3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessSAWLIType.Intensity">
            <summary>Intensity measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessSAWLIType.Thickness">
            <summary>Thickness measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessSAWLIType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessSAWLIType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessSAWLIType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqInterferometricThicknessType">
            <summary>Acquisition thickness measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessType.Thickness1">
            <summary>Thickness1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessType.Thickness2">
            <summary>Thickness2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessType.Thickness3">
            <summary>Thickness3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessType.Quality1">
            <summary>Quality1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessType.Quality2">
            <summary>Quality2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessType.Quality3">
            <summary>Quality3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessType.Intensity">
            <summary>Intensity measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqInterferometricThicknessType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqCHRDistanceDataMeasurementType">
            <summary>Acquisition chr distance transmitted data measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRDistanceDataMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRDistanceDataMeasurementType.Distance">
            <summary>Distance measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRDistanceDataMeasurementType.Intensity">
            <summary>Intensity measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRDistanceDataMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRDistanceDataMeasurementType.BaryCenter">
            <summary>Barycenter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRDistanceDataMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRDistanceDataMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqCHRThicknessDataMeasurementType">
            <summary>Acquisition chr thickness transmitted data measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRThicknessDataMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRThicknessDataMeasurementType.Thickness">
            <summary>Thickness measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRThicknessDataMeasurementType.Distance1">
            <summary>Distance1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRThicknessDataMeasurementType.Distance2">
            <summary>Distance2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRThicknessDataMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRThicknessDataMeasurementType.Intensity1">
            <summary>Intensity1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRThicknessDataMeasurementType.Intensity2">
            <summary>Intensity2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRThicknessDataMeasurementType.BaryCenter1">
            <summary>Barycenter1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRThicknessDataMeasurementType.BaryCenter2">
            <summary>Barycenter2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCHRThicknessDataMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqCCSDistanceDataMeasurementType">
            <summary>Acquisition ccs distance transmitted data measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.Distance_msb">
            <summary>Distance measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.Distance_lsb">
            <summary>Distance measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.AutoAdaptativeModeData">
            <summary>Auto Adaptative Mode Data</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.Intensity">
            <summary>Intensity measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.BaryCenter">
            <summary>Barycenter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.Encoder1_lsb">
            <summary>Encoder1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.Encoder1_msb">
            <summary>Encoder1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.Encoder2_lsb">
            <summary>Encoder2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.Encoder2_msb">
            <summary>Encoder2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.Encoder3_lsb">
            <summary>Encoder3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.Encoder3_msb">
            <summary>Encoder3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSDistanceDataMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqCCSThicknessDataMeasurementType">
            <summary>Acquisition ccs thickness transmitted data measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Thickness">
            <summary>Thickness measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Distance1">
            <summary>Distance1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Distance2">
            <summary>Distance2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.AutoAdaptativeModeData">
            <summary>Auto Adaptative Mode Data</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Intensity1">
            <summary>Intensity1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Intensity2">
            <summary>Intensity2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.BaryCenter1">
            <summary>Barycenter1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.BaryCenter2">
            <summary>Barycenter2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Encoder1_lsb">
            <summary>Encoder1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Encoder1_msb">
            <summary>Encoder1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Encoder2_lsb">
            <summary>Encoder2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Encoder2_msb">
            <summary>Encoder2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Encoder3_lsb">
            <summary>Encoder3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Encoder3_msb">
            <summary>Encoder3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqCCSThicknessDataMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqSPSDistanceDataMeasurementType">
            <summary>Acquisition sps distance transmitted data measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.Distance_msb">
            <summary>Distance measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.Distance_lsb">
            <summary>Distance measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.AutoAdaptativeModeData">
            <summary>Auto Adaptative Mode Data</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.Intensity">
            <summary>Intensity measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.BaryCenter">
            <summary>Barycenter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.Encoder1_lsb">
            <summary>Encoder1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.Encoder1_msb">
            <summary>Encoder1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.Encoder2_lsb">
            <summary>Encoder2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.Encoder2_msb">
            <summary>Encoder2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.Encoder3_lsb">
            <summary>Encoder3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.Encoder3_msb">
            <summary>Encoder3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSDistanceDataMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqSPSThicknessDataMeasurementType">
            <summary>Acquisition sps thickness transmitted data measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Thickness">
            <summary>Thickness measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Distance1">
            <summary>Distance1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Distance2">
            <summary>Distance2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.AutoAdaptativeModeData">
            <summary>Auto Adaptative Mode Data</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Intensity1">
            <summary>Intensity1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Intensity2">
            <summary>Intensity2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.BaryCenter1">
            <summary>Barycenter1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.BaryCenter2">
            <summary>Barycenter2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Encoder1_lsb">
            <summary>Encoder1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Encoder1_msb">
            <summary>Encoder1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Encoder2_lsb">
            <summary>Encoder2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Encoder2_msb">
            <summary>Encoder2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Encoder3_lsb">
            <summary>Encoder3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Encoder3_msb">
            <summary>Encoder3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSThicknessDataMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqSPSAlpha1DistanceDataMeasurementType">
            <summary>Acquisition sps alpha 1 distance transmitted data measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1DistanceDataMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1DistanceDataMeasurementType.Distance_msb">
            <summary>Distance measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1DistanceDataMeasurementType.Distance_lsb">
            <summary>Distance measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1DistanceDataMeasurementType.Intensity">
            <summary>Intensity measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1DistanceDataMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1DistanceDataMeasurementType.BaryCenter">
            <summary>Barycenter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1DistanceDataMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1DistanceDataMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqSPSAlpha1ThicknessDataMeasurementType">
            <summary>Acquisition sps alpha 1 thickness transmitted data measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1ThicknessDataMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1ThicknessDataMeasurementType.Thickness">
            <summary>Thickness measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1ThicknessDataMeasurementType.Distance1">
            <summary>Distance1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1ThicknessDataMeasurementType.Distance2">
            <summary>Distance2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1ThicknessDataMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1ThicknessDataMeasurementType.Intensity1">
            <summary>Intensity1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1ThicknessDataMeasurementType.Intensity2">
            <summary>Intensity2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1ThicknessDataMeasurementType.BaryCenter1">
            <summary>Barycenter1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1ThicknessDataMeasurementType.BaryCenter2">
            <summary>Barycenter2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1ThicknessDataMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqSPSAlpha1ThicknessDataMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqDUODistanceDataMeasurementType">
            <summary>Acquisition duo distance transmitted data measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUODistanceDataMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUODistanceDataMeasurementType.Distance_msb">
            <summary>Distance measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUODistanceDataMeasurementType.Distance_lsb">
            <summary>Distance measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUODistanceDataMeasurementType.Intensity">
            <summary>Intensity measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUODistanceDataMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUODistanceDataMeasurementType.BaryCenter">
            <summary>Barycenter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUODistanceDataMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUODistanceDataMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqDUOThicknessDataMeasurementType">
            <summary>Acquisition duo thickness transmitted data measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOThicknessDataMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOThicknessDataMeasurementType.Thickness">
            <summary>Thickness measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOThicknessDataMeasurementType.Distance1">
            <summary>Distance1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOThicknessDataMeasurementType.Distance2">
            <summary>Distance2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOThicknessDataMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOThicknessDataMeasurementType.Intensity1">
            <summary>Intensity1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOThicknessDataMeasurementType.Intensity2">
            <summary>Intensity2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOThicknessDataMeasurementType.BaryCenter1">
            <summary>Barycenter1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOThicknessDataMeasurementType.BaryCenter2">
            <summary>Barycenter2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOThicknessDataMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOThicknessDataMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqDUOSAWLIDistanceDataMeasurementType">
            <summary>Acquisition duo sawli distance transmitted data measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIDistanceDataMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIDistanceDataMeasurementType.Distance_msb">
            <summary>Distance measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIDistanceDataMeasurementType.Distance_lsb">
            <summary>Distance measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIDistanceDataMeasurementType.Quality">
            <summary>Quality measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIDistanceDataMeasurementType.Intensity">
            <summary>Intensity measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIDistanceDataMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIDistanceDataMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIDistanceDataMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType">
            <summary>Acquisition duo sawli Thickness transmitted data measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Thickness1_msb">
            <summary>Thickness1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Thickness1_lsb">
            <summary>Thickness1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Thickness2_msb">
            <summary>Thickness2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Thickness2_lsb">
            <summary>Thickness2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Thickness3_msb">
            <summary>Thickness3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Thickness3_lsb">
            <summary>Thickness3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Quality1">
            <summary>Quality1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Quality2">
            <summary>Quality2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Quality3">
            <summary>Quality3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Intensity">
            <summary>Intensity measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.NbThickness">
            <summary>NbThickness measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqDUOSAWLIThicknessDataMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqRubyDataMeasurementType">
            <summary>Acquisition ruby transmitted data measurement type.</summary>
        </member>
        <member name="F:STIL_NET.enAcqRubyDataMeasurementType.Min">
            <summary>Buffer min</summary>
        </member>
        <member name="F:STIL_NET.enAcqRubyDataMeasurementType.Coordinate0">
            <summary>Coordinate0 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqRubyDataMeasurementType.Coordinate1">
            <summary>Coordinate1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqRubyDataMeasurementType.Coordinate2">
            <summary>Coordinate2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqRubyDataMeasurementType.Delta_Coordinate">
            <summary>Delta Coordinate Data</summary>
        </member>
        <member name="F:STIL_NET.enAcqRubyDataMeasurementType.Spectral_Delta">
            <summary>Spectral Delta measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqRubyDataMeasurementType.Conformity">
            <summary>Conformity Data</summary>
        </member>
        <member name="F:STIL_NET.enAcqRubyDataMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqRubyDataMeasurementType.Max">
            <summary>Buffer max</summary>
        </member>
        <member name="T:STIL_NET.enAcqGenericDataMeasurementType">
            <summary>Type of buffers used for the acquisition..</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.None">
            <summary>No measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Distance">
            <summary>Distance measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Distance1">
            <summary>Distance1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Distance2">
            <summary>Distance2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Intensity1">
            <summary>Intensity1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Intensity2">
            <summary>Intensity2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.BaryCenter">
            <summary>Barycenter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.BaryCenter1">
            <summary>Barycenter1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.BaryCenter2">
            <summary>Barycenter2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Thickness">
            <summary>Thickness measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Thickness1">
            <summary>Thickness1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Thickness2">
            <summary>Thickness2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Thickness3">
            <summary>Thickness3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Quality">
            <summary>Quality measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Quality1">
            <summary>Quality1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Quality2">
            <summary>Quality2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Quality3">
            <summary>Quality3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Intensity">
            <summary>Intensity measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.NbThickness">
            <summary>NbThickness measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Counter">
            <summary>Counter measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Status">
            <summary>Status measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Encoder1">
            <summary>Encoder1 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Encoder2">
            <summary>Encoder2 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Encoder3">
            <summary>Encoder3 measurement</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.AutoAdaptativeModeData">
            <summary>Auto Adaptative Mode Data</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Altitude">
            <summary>Altitude</summary>
        </member>
        <member name="F:STIL_NET.enAcqGenericDataMeasurementType.Depth">
            <summary>Depth</summary>
        </member>
        <member name="T:STIL_NET.cTimeMeasurement">
            <summary>
            Class that can measure time in seconds, milliseconds or micro seconds.
            </summary>
        </member>
        <member name="M:STIL_NET.cTimeMeasurement.QueryPerformanceFrequency(System.Int64@)">
            <summary>
            request the frequency performance counter.
            </summary>
            <param name="lpFrequency">Frequency performance counter.</param>
            <returns>Frequency performance counter value</returns>
        </member>
        <member name="M:STIL_NET.cTimeMeasurement.QueryPerformanceCounter(System.Int64@)">
            <summary>
            request the performance counter.
            </summary>
            <param name="lpPerformanceCount">Performance counter.</param>
            <returns>Performance counter value</returns>       
        </member>
        <member name="M:STIL_NET.cTimeMeasurement.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:STIL_NET.cTimeMeasurement.#ctor(STIL_NET.cTimeMeasurement.enTimeStepType)">
            <summary>
            constructor
            </summary>
            <param name="value">Type of step time value</param>
        </member>
        <member name="M:STIL_NET.cTimeMeasurement.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.cTimeMeasurement.Clear">
            <summary>
            Clear current value (Reset time measurement)
            </summary>
        </member>
        <member name="M:STIL_NET.cTimeMeasurement.Start">
            <summary>Function to make a start measurement</summary>
        </member>
        <member name="M:STIL_NET.cTimeMeasurement.Pause">
            <summary>Function to make a pause measurement</summary>
        </member>
        <member name="M:STIL_NET.cTimeMeasurement.Restart">
            <summary>Function to make a restart measurement</summary>
        </member>
        <member name="M:STIL_NET.cTimeMeasurement.Stop">
            <summary>Function to make a stop measurement</summary>
        </member>
        <member name="P:STIL_NET.cTimeMeasurement.TimeStepType">
            <summary>Property to select time step type.</summary>
        </member>
        <member name="P:STIL_NET.cTimeMeasurement.CurrentTiming">
            <summary>Function that returns the current value of time.</summary>
        </member>
        <member name="P:STIL_NET.cTimeMeasurement.FlashTiming">
            <summary>Function that returns the flash value of time.</summary>
        </member>
        <member name="T:STIL_NET.cTimeMeasurement.enTimeStepType">
            <summary>time type</summary>
        </member>
        <member name="F:STIL_NET.cTimeMeasurement.enTimeStepType.SECONDE">
            <summary>time step second</summary>
        </member>
        <member name="F:STIL_NET.cTimeMeasurement.enTimeStepType.MILLISECOND">
            <summary>time step millisecond</summary>
        </member>
        <member name="F:STIL_NET.cTimeMeasurement.enTimeStepType.MICROSECOND">
            <summary>time step microsecond</summary>
        </member>
        <member name="T:STIL_NET.cUpdateBitsField">
            <summary>
            Class for make update
            </summary>
        </member>
        <member name="M:STIL_NET.cUpdateBitsField.Set(System.Boolean)">
            <summary>reset all flag of update</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.Enabled">
            <summary>Enabled</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.SensorName">
            <summary>use for make update SensorName property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.FirmwareVersion">
            <summary>use for make update FirmwareVersion property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.SerialNumber">
            <summary>use for make update SerialNumber property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.SensorType">
            <summary>use for make update SensorType property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.MaxPenNumber">
            <summary>use for make update MaxPenNumber property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.PenList">
            <summary>use for make update PenList property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.MaxNumberOfTransmittedData">
            <summary>use for make update MaxNumberOfTransmittedData property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.FullScale">
            <summary>use for make update FullScale property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.RateList">
            <summary>use for make update RateList property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.DigitalOutput">
            <summary>use for make update DigitalOutput property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.AcqDark">
            <summary>use for make update AcqDark property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.OpticalPen">
            <summary>use for make update OpticalPen property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.ThicknessScale">
            <summary>use for make update ThicknessScale property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.ScanRate">
            <summary>use for make update ScanRate property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.Averaging">
            <summary>use for make update Averaging property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.MeasureMode">
            <summary>use for make update MeasureMode property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.RefractiveIndex">
            <summary>use for make update RefractiveIndex property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.DistanceDetectionThreshold">
            <summary>use for make update DistanceDetectionThreshold property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.SetGetAnalogOutput">
            <summary>use for make update Set / GetAnalogOutput function</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.ThicknessDetectionThreshold">
            <summary>use for make update Set / GetThicknessDetectionThreshold function</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.FreeFrequency">
            <summary>use for make update FreeFrequency property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.CcdMaxPixels">
            <summary>use for make update CCDMaxPixels property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.LedAuto">
            <summary>use for make update LedAuto property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.LedBrightness">
            <summary>use for make update LedBrightness property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.MinDarkFrequency">
            <summary>use for make update MinDarkFrequency property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.HoldLastValue">
            <summary>use for make update HoldLastValue property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.DigitalOutputFormat">
            <summary>use for make update DigitalOutputFormat property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.BaryCenterScale">
            <summary>use for make update BarycenterScale property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.BaryCenterRef">
            <summary>use for make update BarycenterRef property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.MultiplexChannelNumber">
            <summary>use for make update MultiplexChannelNumber property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.MultiplexChannel">
            <summary>use for make update MultiplexChannel property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.SawliRefractiveIndex">
            <summary>use for make update RefractiveIndexSAWLI property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.MaxThickness">
            <summary>use for make update MaxThickness property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.MinThickness">
            <summary>use for make update MinThickness property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.NumberOfLayers">
            <summary>use for make update NumberOfLayers property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.PeakSelectionMode">
            <summary>use for make update PeakSelectionMode property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.AutoDarkMode">
            <summary>use for make update AutoDarkMode property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.AutoModeThreshold">
            <summary>use for make update AutoModeThreshold property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.DoubleFrequencyParameters">
            <summary>use for make update DoubleFrequencyParameters property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.WhiteRefCuttingValue">
            <summary>use for make update WhiteRefCuttingValue property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.WhiteRefMaxThreshold">
            <summary>use for make update WhiteRefMaxThreshold property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.WhiteRefMinThreshold">
            <summary>use for make update WhiteRefMinThreshold property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.WhiteRefAvg">
            <summary>use for make update WhiteRefAvg property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.LevelEdgeFlag">
            <summary>use for make update LevelEdgeFlag property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.WhiteRefFrq">
            <summary>use for make update WhiteRefFrq property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.WhiteRefNormaMaxThreshold">
            <summary>use for make update WhiteRefNormaMaxThreshold property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.WhiteRefNormaMinThreshold">
            <summary>use for make update WhiteRefNormaMinThreshold property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.WhiteRefNormaAvg">
            <summary>use for make update WhiteRefNormaAvg property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.WhiteRefNormaFrq">
            <summary>use for make update WhiteRefNormaFrq property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.BracketedMode">
            <summary>use for make update BracketedMode property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.LeftDetectionLimit">
            <summary>use for make update LeftDetectionLimit property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.RightDetectionLimit">
            <summary>use for make update RightDetectionLimit property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.QualityThreshold">
            <summary>use for make update QualityThreshold property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.AcqBlack">
            <summary>use for make update AcqBlack property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.AutoRateMode">
            <summary>use for make update AutoRateMode property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.AutoWhiteRef">
            <summary>use for make update AutoRateMode property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.BlackAveraging">
            <summary>use for make update BlackAveraging property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.BlackMaxThreshold">
            <summary>use for make update BlackMaxThreshold property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.ConnectionType">
            <summary>use for make update ConnectionType property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.ExposureTimeDW">
            <summary>use for make update ExposureTimeDW property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.ExposureTime">
            <summary>use for make update ExposureTime property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.FirstCcdPixelRead">
            <summary>use for make update FirstCCDPixelRead property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.FullScaleInterferometric">
            <summary>use for make update FullScaleInterferometric property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.Language">
            <summary>use for make update Language property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.LastWhiteRefState">
            <summary>use for make update LastWhiteRefState property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.LedType">
            <summary>use for make update LedType property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.MaxCalibrationFileValue">
            <summary>use for make update MaxCalibrationFileValue property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.NonExistantSecondPeakHandling">
            <summary>use for make update NonExistantSecondPeakHandling property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.SmoothingValue">
            <summary>use for make update SmoothingValue property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.FirstUsablePixel">
            <summary>use for make update firstUsablePixel property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.NumberOfUsablePixels">
            <summary>use for make update NumberOfUsablePixels property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.WhiteRefAveraging">
            <summary>use for make update WhiteRefAveraging property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.NumberMaxPixels">
            <summary>use for make update NbrMaxPixels property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.FirstPixel">
            <summary>use for make update FirstPixel property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.Sampling">
            <summary>use for make update Sampling property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.NumberOfPixels">
            <summary>use for make update NumberOfPixels property</summary>
        </member>
        <member name="P:STIL_NET.cUpdateBitsField.RealTimeSignalType">
            <summary>use for make update RealTimeSignalType property</summary>
        </member>
        <member name="T:STIL_NET.StringEnum">
            <summary>
            Helper class for working with 'extended' enums using <see cref="T:STIL_NET.StringValueAttribute"/> attributes.
            </summary>
        </member>
        <member name="M:STIL_NET.StringEnum.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:STIL_NET.StringEnum"/> instance.
            </summary>
            <param name="enumType">Enum type.</param>
        </member>
        <member name="M:STIL_NET.StringEnum.GetStringValue(System.String)">
            <summary>
            Gets the string value associated with the given enum value.
            </summary>
            <param name="valueName">Name of the enum value.</param>
            <returns>String Value</returns>
        </member>
        <member name="M:STIL_NET.StringEnum.GetStringValues">
            <summary>
            Gets the string values associated with the enum.
            </summary>
            <returns>String value array</returns>
        </member>
        <member name="M:STIL_NET.StringEnum.GetListValues">
            <summary>
            Gets the values as a 'bindable' list datasource.
            </summary>
            <returns>IList for data binding</returns>
        </member>
        <member name="M:STIL_NET.StringEnum.IsStringDefined(System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:STIL_NET.StringEnum.IsStringDefined(System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:STIL_NET.StringEnum.GetStringValue(System.Enum)">
            <summary>
            Gets a string value for a particular enum value.
            </summary>
            <param name="value">Value.</param>
            <returns>String Value associated via a <see cref="T:STIL_NET.StringValueAttribute"/> attribute, or null if not found.</returns>
        </member>
        <member name="M:STIL_NET.StringEnum.Parse(System.Type,System.String)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value (case sensitive).
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:STIL_NET.StringEnum.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value.
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:STIL_NET.StringEnum.IsStringDefined(System.Type,System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="enumType">Type of enum</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:STIL_NET.StringEnum.IsStringDefined(System.Type,System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="enumType">Type of enum</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="P:STIL_NET.StringEnum.EnumType">
            <summary>
            Gets the underlying enum type for this instance.
            </summary>
            <value></value>
        </member>
        <member name="T:STIL_NET.StringValueAttribute">
            <summary>
            Simple attribute class for storing String Values
            </summary>
        </member>
        <member name="M:STIL_NET.StringValueAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:STIL_NET.StringValueAttribute"/> instance.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="P:STIL_NET.StringValueAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value></value>
        </member>
        <member name="T:STIL_NET.AccessControlCtrl">
            <summary>
            Acces Control
            </summary>
        </member>
        <member name="T:STIL_NET.SensorUserCtrl">
            <summary>Base class for all user controls.</summary>
        </member>
        <member name="F:STIL_NET.SensorUserCtrl.m_sensor">
            <summary>Sensor member used by the custom control.</summary>
        </member>
        <member name="F:STIL_NET.SensorUserCtrl.m_connectCtrl">
            <summary>Sensor selection box.</summary>
        </member>
        <member name="M:STIL_NET.SensorUserCtrl.EnableWindows(System.Boolean)">
            <summary>Enable or disable all windows.</summary>
            <param name="enabled">Enable or disable all windows</param>
        </member>
        <member name="M:STIL_NET.SensorUserCtrl.OnAcquisitionStopped(System.Object,System.EventArgs)">
            <summary>
            Function called when acquisition process is stopped. Default action is to enable all windows
            </summary>
            <param name="sender">object sender</param>
            <param name="e">event data</param>
        </member>
        <member name="M:STIL_NET.SensorUserCtrl.OnAcquisitionStarting(System.Object,System.EventArgs)">
            <summary>
            Function called when acquisition is started. Default action is to disable all windows
            </summary>
            <param name="sender">object sender</param>
            <param name="e">event data</param>
        </member>
        <member name="M:STIL_NET.SensorUserCtrl.OnMeasureModeChange(System.Object,System.EventArgs)">
            <summary>
            Function called when measure mode has changed
            </summary>
            <param name="sender">object sender</param>
            <param name="e">event data</param>
        </member>
        <member name="M:STIL_NET.SensorUserCtrl.OnUnplugged(System.Object,System.EventArgs)">
            <summary>
            Function called when unplugged sensor. Default action is to disable all windows
            </summary>
            <param name="sender">object sender</param>
            <param name="e">event data</param>
        </member>
        <member name="M:STIL_NET.SensorUserCtrl.#ctor">
            <summary>
            Sensor user control constructor
            </summary>
        </member>
        <member name="P:STIL_NET.SensorUserCtrl.Language">
            <summary>
            Gets or sets the base color for the progress.
            </summary>
        </member>
        <member name="P:STIL_NET.SensorUserCtrl.Sensor">
            <summary>
            Sensor used by the custom control
            </summary>
        </member>
        <member name="P:STIL_NET.SensorUserCtrl.ConnectCtrl">
            <summary>Use this property to link this user control to the <see cref="T:STIL_NET.ConnectDeviceCtrl"/>. This user control will use the <see cref="E:STIL_NET.ConnectDeviceCtrl.OnConnect"/> event together with the <see cref="P:STIL_NET.ConnectDeviceCtrl.Sensor"/> function to retreive the sensor object.</summary>
        </member>
        <member name="M:STIL_NET.AccessControlCtrl.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.AccessControlCtrl.DisplayGUI">
            <summary>Display control.</summary>
        </member>
        <member name="F:STIL_NET.AccessControlCtrl.components">
            <summary>
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:STIL_NET.AccessControlCtrl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing"><see langword="true"/> if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:STIL_NET.AccessControlCtrl.InitializeComponent">
            <summary>
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="E:STIL_NET.AccessControlCtrl.OnError">
            <summary>error event</summary>        
        </member>
        <member name="T:STIL_NET.AccessControlCtrl.DisplayGUIHandler">
            <summary>delagate for display control</summary>
        </member>
        <member name="T:STIL_NET.AccessControlCtrl.ErrorHandler">
            <summary>delagate for error event</summary>
        </member>
        <member name="T:STIL_NET.BrightnessCtrl">
            <summary>
            Graphical user control allowing the user to modify LED brightness
            </summary>
        </member>
        <member name="M:STIL_NET.BrightnessCtrl.#ctor">
            <summary>Brightness control constructor.</summary>
        </member>
        <member name="M:STIL_NET.BrightnessCtrl.DisplayGUI">
            <summary>Display control.</summary>
        </member>
        <member name="F:STIL_NET.BrightnessCtrl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:STIL_NET.BrightnessCtrl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing"><see langword="true"/> if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:STIL_NET.BrightnessCtrl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:STIL_NET.BrightnessCtrl.OnError">
            <summary>error event</summary>        
        </member>
        <member name="T:STIL_NET.BrightnessCtrl.DisplayGUIHandler">
            <summary>delagate for display control</summary>
        </member>
        <member name="T:STIL_NET.BrightnessCtrl.ErrorHandler">
            <summary>delagate for error event</summary>
        </member>
        <member name="T:STIL_NET.ConnectDeviceCtrl">
            <summary>
            Graphical user control that allows connecting to a sensor device
            </summary>
            <summary>
            Graphical user control that allows connecting to a sensor device
            </summary>
        </member>
        <member name="F:STIL_NET.ConnectDeviceCtrl.progressThread">
            <summary>Thread of progress </summary>
        </member>
        <member name="F:STIL_NET.ConnectDeviceCtrl.ExecuteThread">
            <summary>Thread of execute </summary>
        </member>
        <member name="M:STIL_NET.ConnectDeviceCtrl.#ctor">
            <summary>constructor</summary> 
        </member>
        <member name="M:STIL_NET.ConnectDeviceCtrl.Finalize">
            <summary>destructor</summary> 
        </member>
        <member name="M:STIL_NET.ConnectDeviceCtrl.FuncProgressThread">
            <summary>Thread process.</summary>
        </member>
        <member name="M:STIL_NET.ConnectDeviceCtrl.FuncExecuteThread">
            <summary>Thread execute.</summary>
        </member>
        <member name="M:STIL_NET.ConnectDeviceCtrl.FormToData(STIL_NET.ConnectDeviceCtrl.s_connect_param_async@)">
            <summary>get form data</summary>
            <param name="data">struct of data</param>
            <returns><see langword="true"/> if function success</returns>
        </member>
        <member name="M:STIL_NET.ConnectDeviceCtrl.function_OnError(System.Object,STIL_NET.cErrorEventArgs)">
            <summary>Error</summary>
        </member>
        <member name="M:STIL_NET.ConnectDeviceCtrl.Disconnect">
            <summary>Disconnect</summary>
        </member>
        <member name="M:STIL_NET.ConnectDeviceCtrl.OnSensorUnPlugging(System.Object,System.EventArgs)">
            <summary>Function called when Unplugged sensor </summary>
        </member>
        <member name="F:STIL_NET.ConnectDeviceCtrl.components">
            <summary> 
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:STIL_NET.ConnectDeviceCtrl.Dispose(System.Boolean)">
            <summary> 
            Nettoyage des ressources utilisées.
            </summary>
            <param name="disposing"><see langword="true"/> si les ressources managées doivent être supprimées ; sinon, false.</param>
        </member>
        <member name="M:STIL_NET.ConnectDeviceCtrl.InitializeComponent">
            <summary> 
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas 
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="E:STIL_NET.ConnectDeviceCtrl.OnError">
            <summary>error event</summary>        
        </member>
        <member name="P:STIL_NET.ConnectDeviceCtrl.Sensor">
            <summary>Returns the sensor.</summary>
        </member>
        <member name="E:STIL_NET.ConnectDeviceCtrl.OnConnect">
            <summary>
            Called when connection has been established
            </summary>
        </member>
        <member name="E:STIL_NET.ConnectDeviceCtrl.OnUnplugged">
            <summary>
            Called when connection has been losted
            </summary>
        </member>
        <member name="P:STIL_NET.ConnectDeviceCtrl.ProgressColor">
            <summary>
            Gets or sets the base color for the progress.
            </summary>
        </member>
        <member name="T:STIL_NET.ConnectDeviceCtrl.DisplayGUIHandler">
            <summary>delagate for display control</summary>
        </member>
        <member name="T:STIL_NET.ConnectDeviceCtrl.ErrorHandler">
            <summary>delagate for error event</summary>
        </member>
        <member name="T:STIL_NET.ConnectDeviceGUI">
            <summary>Display GUI class.</summary>
        </member>
        <member name="M:STIL_NET.ConnectDeviceGUI.FuncInitComboBox(System.Windows.Forms.ComboBox,System.Int32)">
            <summary>initialisation of sensor type and protocol type combobox</summary> 
        </member>
        <member name="M:STIL_NET.ConnectDeviceGUI.FuncProgressChanged(STIL_NET.ProgressIndicator,System.Boolean)">
            <summary>Change progress bar</summary> 
        </member>
        <member name="M:STIL_NET.ConnectDeviceGUI.FuncUpdateUsbDeviceList(STIL_NET.ConnectDeviceGUI.s_connect_device_ctrl)">
            <summary>Update USB Device List</summary>
        </member>
        <member name="M:STIL_NET.ConnectDeviceGUI.FuncUpdateButtonState(STIL_NET.ConnectDeviceGUI.s_connect_device_ctrl,System.Boolean)">
            <summary>Update buttons state</summary> 
        </member>
        <member name="M:STIL_NET.ConnectDeviceGUI.FuncSelectedIndexChanged(STIL_NET.ConnectDeviceGUI.s_connect_device_ctrl,System.Boolean)">
            <summary>Protocol combobox selected index change</summary> 
        </member>
        <member name="T:STIL_NET.ConnectDeviceGUI.s_connect_device_ctrl">
            <summary>connection device control structure</summary>
        </member>
        <member name="F:STIL_NET.ConnectDeviceGUI.s_connect_device_ctrl.protocol">
            <summary>protocol combobox</summary>
        </member>
        <member name="F:STIL_NET.ConnectDeviceGUI.s_connect_device_ctrl.type">
            <summary>sensor type combobox</summary>
        </member>
        <member name="F:STIL_NET.ConnectDeviceGUI.s_connect_device_ctrl.port">
            <summary>port combobox</summary>
        </member>
        <member name="F:STIL_NET.ConnectDeviceGUI.s_connect_device_ctrl.device_id">
            <summary>device id label</summary>
        </member>
        <member name="F:STIL_NET.ConnectDeviceGUI.s_connect_device_ctrl.connect">
            <summary>connect button</summary>
        </member>
        <member name="F:STIL_NET.ConnectDeviceGUI.s_connect_device_ctrl.disconnect">
            <summary>disconnect button</summary>
        </member>
        <member name="F:STIL_NET.ConnectDeviceGUI.s_connect_device_ctrl.refresh">
            <summary>refresh button</summary>
        </member>
        <member name="F:STIL_NET.ConnectDeviceGUI.s_connect_device_ctrl.sensor_manager">
            <summary>sensorManager object</summary>
        </member>
        <member name="F:STIL_NET.ConnectDeviceGUI.s_connect_device_ctrl.sensor">
            <summary>sensor object</summary>
        </member>
        <member name="T:STIL_NET.ConnectDeviceGUI.InitComboBox">
            <summary>delegate initialisation of sensor type and protocol type combobox</summary> 
        </member>
        <member name="T:STIL_NET.ConnectDeviceGUI.ProgressChanged">
            <summary>delegate change progress bar</summary> 
        </member>
        <member name="T:STIL_NET.ConnectDeviceGUI.SelectedIndexChanged">
            <summary>delegate protocol combobox selected index change</summary> 
        </member>
        <member name="T:STIL_NET.ConnectDeviceGUI.UpdateButtonState">
            <summary>delegate update buttons state</summary> 
        </member>
        <member name="T:STIL_NET.ConnectDeviceGUI.UpdateUsbDeviceList">
            <summary>delegate update USB Device List</summary> 
        </member>
        <member name="T:STIL_NET.DigitalOuputCtrl">
            <summary>
            Digital output control class
            </summary>
        </member>
        <member name="M:STIL_NET.DigitalOuputCtrl.#ctor">
            <summary>
            Digital output control constructor
            </summary>
        </member>
        <member name="M:STIL_NET.DigitalOuputCtrl.DisplayGUI">
            <summary>Display control.</summary>
        </member>
        <member name="M:STIL_NET.DigitalOuputCtrl.OnMeasureModeChange(System.Object,System.EventArgs)">
            <summary>
            Function called when measure mode has changed
            </summary>
            <param name="sender"> object sender</param>
            <param name="e">event data</param>
        </member>
        <member name="F:STIL_NET.DigitalOuputCtrl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:STIL_NET.DigitalOuputCtrl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing"><see langword="true"/> if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:STIL_NET.DigitalOuputCtrl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:STIL_NET.DigitalOuputCtrl.OnError">
            <summary>error event</summary>        
        </member>
        <member name="T:STIL_NET.DigitalOuputCtrl.DisplayGUIHandler">
            <summary>delagate for display control</summary>
        </member>
        <member name="T:STIL_NET.DigitalOuputCtrl.ErrorHandler">
            <summary>delagate for error event</summary>
        </member>
        <member name="T:STIL_NET.InfoLog">
            <summary>
            InfoLog Class
            </summary>
        </member>
        <member name="M:STIL_NET.InfoLog.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.InfoLog.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:STIL_NET.InfoLog._CreateLogFile">
            <summary>
            Open log file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:STIL_NET.InfoLog._CloseLogFile">
            <summary>close log file </summary>
        </member>
        <member name="M:STIL_NET.InfoLog.AddInfoLog(STIL_NET.eInfoLogType,System.String,System.String)">
            <summary>add new line info</summary>
            <param name="type">the type of information</param>
            <param name="text">the text which represents information</param>
            <param name="tiptooltext">the text which represents information of additional in form of tiptool</param>
        </member>
        <member name="M:STIL_NET.InfoLog.ClearInfoLog">
            <summary>clear all line info</summary>
        </member>
        <member name="M:STIL_NET.InfoLog.SaveConfiguration(System.String)">
            <summary>save configuration parameters</summary>
            <param name="filename">File name of configuration</param>
            <returns>false on write infolog</returns>
        </member>
        <member name="M:STIL_NET.InfoLog.LoadConfiguration(System.String)">
            <summary>
            Load configuration file 
            </summary>
            <param name="filename">File name of configuration</param>
            <returns><see langword="true"/> if successfull, <see langword="false"/> in case of failure </returns>
        </member>
        <member name="M:STIL_NET.InfoLog.FilterInformationMenuItem_Click(System.Object,System.EventArgs)">
            <summary>Action on item information of menu</summary>
        </member>
        <member name="M:STIL_NET.InfoLog.FilterWarningMenuItem_Click(System.Object,System.EventArgs)">
            <summary>Action on item warning of menu</summary>
        </member>
        <member name="M:STIL_NET.InfoLog.FilterErrorMenuItem_Click(System.Object,System.EventArgs)">
            <summary>Action on item error of menu</summary>
        </member>
        <member name="M:STIL_NET.InfoLog.FilterOkMenuItem_Click(System.Object,System.EventArgs)">
            <summary>Action on item ok of menu</summary>
        </member>
        <member name="M:STIL_NET.InfoLog.FilterHardwareMenuItem_Click(System.Object,System.EventArgs)">
            <summary>Action on item hardware of menu</summary>
        </member>
        <member name="M:STIL_NET.InfoLog.FilterDebugMenuItem_Click(System.Object,System.EventArgs)">
            <summary>Action on item debug of menu</summary>
        </member>
        <member name="M:STIL_NET.InfoLog.FilterExceptionMenuItem_Click(System.Object,System.EventArgs)">
            <summary>Action on item exception of menu</summary>
        </member>
        <member name="M:STIL_NET.InfoLog.FilterLockedMenuItem_Click(System.Object,System.EventArgs)">
            <summary>Action on item locked of menu</summary>
        </member>
        <member name="F:STIL_NET.InfoLog.components">
            <summary>
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:STIL_NET.InfoLog.Dispose(System.Boolean)">
            <summary>
            Nettoyage des ressources utilisées.
            </summary>
            <param name="disposing"><see langword="true"/> si les ressources managées doivent être supprimées ; sinon, false.</param>
        </member>
        <member name="M:STIL_NET.InfoLog.InitializeComponent">
            <summary>
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas 
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="P:STIL_NET.InfoLog.ShowDateTime">
            <summary>
            Add the date and the hour in the line of information.
            </summary>
        </member>
        <member name="P:STIL_NET.InfoLog.EnabledTimerDelay">
            <summary>
            Introduced a delay into the billing which will be useful for big packets of information.
            </summary>
        </member>
        <member name="P:STIL_NET.InfoLog.TimerDisplayInterval">
            <summary>
            Timer display delay.
            </summary>
        </member>
        <member name="P:STIL_NET.InfoLog.MenuLanguage">
            <summary>
            "Menu language.
            </summary>
        </member>
        <member name="P:STIL_NET.InfoLog.MaximumCapacityLine">
            <summary>
            Number restricts stocked lines.
            </summary>
        </member>
        <member name="P:STIL_NET.InfoLog.EnabledMenu">
            <summary>
            Show menu.
            </summary>
        </member>
        <member name="P:STIL_NET.InfoLog.PauseDisplay">
            <summary>
            Pause display.
            </summary>
        </member>
        <member name="P:STIL_NET.InfoLog.EnabledLofFile">
            <summary>
            Enabled recording log file.
            </summary>
        </member>
        <member name="P:STIL_NET.InfoLog.FilterDisplay">
            <summary>
            Filter display options.
            </summary>
        </member>
        <member name="T:STIL_NET.eLanguageType">
            <summary>type of language</summary>
        </member>
        <member name="F:STIL_NET.eLanguageType.french">
            <summary>French language</summary>
        </member>
        <member name="F:STIL_NET.eLanguageType.english">
            <summary>English language</summary>
        </member>
        <member name="T:STIL_NET.eInfoLogType">
            <summary>type of log information</summary>
        </member>
        <member name="F:STIL_NET.eInfoLogType.information">
            <summary>Information flag</summary>
        </member>
        <member name="F:STIL_NET.eInfoLogType.warning">
            <summary>Warning flag</summary>
        </member>
        <member name="F:STIL_NET.eInfoLogType.error">
            <summary>Error flag</summary>
        </member>
        <member name="F:STIL_NET.eInfoLogType.ok">
            <summary>Ok flag</summary>
        </member>
        <member name="F:STIL_NET.eInfoLogType.hardware">
            <summary>Hardware flag</summary>
        </member>
        <member name="F:STIL_NET.eInfoLogType.debug">
            <summary>Debug flag</summary>
        </member>
        <member name="F:STIL_NET.eInfoLogType.exception">
            <summary>Exception flag</summary>
        </member>
        <member name="F:STIL_NET.eInfoLogType.locked">
            <summary>Locked flag</summary>
        </member>
        <member name="T:STIL_NET.FilterInfoLog">
            <summary>
            FilterInfoLog Class
            </summary>
        </member>
        <member name="M:STIL_NET.FilterInfoLog.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:STIL_NET.FilterInfoLog.IsDisplay(STIL_NET.eInfoLogType)">
            <summary>Indicates whether the type information is displayed</summary>
            <param name="InfoLogType">Type of log information</param>
            <returns><see langword="true"/> if type of log information is display.</returns>
        </member>
        <member name="E:STIL_NET.FilterInfoLog.UpdateDataEvent">
            <summary>event for update data</summary>
        </member>
        <member name="P:STIL_NET.FilterInfoLog.FilterOk">
            <summary>Indicates whether the type information Ok is displayed</summary>
        </member>
        <member name="P:STIL_NET.FilterInfoLog.FilterInformation">
            <summary>Indicates whether the type information Information is displayed</summary>
        </member>
        <member name="P:STIL_NET.FilterInfoLog.FilterWarning">
            <summary>Indicates whether the type information Warning is displayed</summary>
        </member>
        <member name="P:STIL_NET.FilterInfoLog.FilterError">
            <summary>Indicates whether the type information Error is displayed</summary>
        </member>
        <member name="P:STIL_NET.FilterInfoLog.FilterHardware">
            <summary>Indicates whether the type information Hardware is displayed</summary>
        </member>
        <member name="P:STIL_NET.FilterInfoLog.FilterDebug">
            <summary>Indicates whether the type information Debug is displayed</summary>
        </member>
        <member name="P:STIL_NET.FilterInfoLog.FilterException">
            <summary>Indicates whether the type information Exception is displayed</summary>
        </member>
        <member name="P:STIL_NET.FilterInfoLog.FilterLocked">
            <summary>Indicates whether the type information Locked is displayed</summary>
        </member>
        <member name="T:STIL_NET.FilterInfoLog.update_data_handler">
            <summary>delegate function for update data</summary>
        </member>
        <member name="T:STIL_NET.OpticalPenCtrl">
            <summary>
            Graphical user control that enables the user to select an optical pen from a list
            </summary>
            <summary>
            Provides an interface for selecting an optical pen
            </summary>
        </member>
        <member name="M:STIL_NET.OpticalPenCtrl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:STIL_NET.OpticalPenCtrl.DisplayGUI">
            <summary>Display control.</summary>
        </member>
        <member name="F:STIL_NET.OpticalPenCtrl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:STIL_NET.OpticalPenCtrl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing"><see langword="true"/> if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:STIL_NET.OpticalPenCtrl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:STIL_NET.OpticalPenCtrl.OnError">
            <summary>error event</summary>        
        </member>
        <member name="T:STIL_NET.OpticalPenCtrl.DisplayGUIHandler">
            <summary>delagate for display control</summary>
        </member>
        <member name="T:STIL_NET.OpticalPenCtrl.ErrorHandler">
            <summary>delagate for error event</summary>
        </member>
        <member name="T:STIL_NET.ProgressIndicator">
            <summary>
            Firefox like circular progress indicator.
            </summary>
        </member>
        <member name="M:STIL_NET.ProgressIndicator.#ctor">
            <summary>
            Default constructor for the ProgressIndicator.
            </summary>
        </member>
        <member name="M:STIL_NET.ProgressIndicator.Start">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:STIL_NET.ProgressIndicator.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:STIL_NET.ProgressIndicator.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint Event
            </summary>
            <param name="e">Parameters</param>
        </member>
        <member name="M:STIL_NET.ProgressIndicator.OnResize(System.EventArgs)">
            <summary>
            Resize
            </summary>
            <param name="e">Parameters</param>
        </member>
        <member name="M:STIL_NET.ProgressIndicator.OnSizeChanged(System.EventArgs)">
            <summary>
            Size changed
            </summary>
            <param name="e">Parameters</param>
        </member>
        <member name="F:STIL_NET.ProgressIndicator.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:STIL_NET.ProgressIndicator.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing"><see langword="true"/> if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:STIL_NET.ProgressIndicator.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:STIL_NET.ProgressIndicator.CircleColor">
            <summary>
            Gets or sets the base color for the circles.
            </summary>
        </member>
        <member name="P:STIL_NET.ProgressIndicator.AutoStart">
            <summary>
            Gets or sets a value indicating if the animation should start automatically.
            </summary>
        </member>
        <member name="P:STIL_NET.ProgressIndicator.CircleSize">
            <summary>
            Gets or sets the scale for the circles raging from 0.1 to 1.0.
            </summary>
        </member>
        <member name="P:STIL_NET.ProgressIndicator.AnimationSpeed">
            <summary>
            Gets or sets the animation speed.
            </summary>
        </member>
        <member name="T:STIL_NET.ScanRateSelectionCtrl">
            <summary>
            Graphical user control allowing the user to select a scan rate
            </summary>
        </member>
        <member name="M:STIL_NET.ScanRateSelectionCtrl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:STIL_NET.ScanRateSelectionCtrl.DisplayGUI">
            <summary>Display control.</summary>
        </member>
        <member name="F:STIL_NET.ScanRateSelectionCtrl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:STIL_NET.ScanRateSelectionCtrl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing"><see langword="true"/> if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:STIL_NET.ScanRateSelectionCtrl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:STIL_NET.ScanRateSelectionCtrl.OnError">
            <summary>error event</summary>        
        </member>
        <member name="T:STIL_NET.ScanRateSelectionCtrl.DisplayGUIHandler">
            <summary>delagate for display control</summary>
        </member>
        <member name="T:STIL_NET.ScanRateSelectionCtrl.ErrorHandler">
            <summary>delagate for error event</summary>
        </member>
        <member name="T:STIL_NET.SendCommand">
            <summary>
            Graphical user control allowing the user to send a command line.
            </summary>
        </member>
        <member name="F:STIL_NET.SendCommand.response">
            <summary>
            command line response
            </summary>
        </member>
        <member name="F:STIL_NET.SendCommand.isValidResponse">
            <summary>
            true if resposnse is valid.
            </summary>
        </member>
        <member name="M:STIL_NET.SendCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:STIL_NET.SendCommand.DisplayGUI">
            <summary>Display control.</summary>
        </member>
        <member name="F:STIL_NET.SendCommand.components">
            <summary> 
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:STIL_NET.SendCommand.Dispose(System.Boolean)">
            <summary> 
            Nettoyage des ressources utilisées.
            </summary>
            <param name="disposing">true si les ressources managées doivent être supprimées ; sinon, false.</param>
        </member>
        <member name="M:STIL_NET.SendCommand.InitializeComponent">
            <summary> 
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas 
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="E:STIL_NET.SendCommand.OnError">
            <summary>error event</summary>        
        </member>
        <member name="T:STIL_NET.SendCommand.DisplayGUIHandler">
            <summary>delagate for display control</summary>
        </member>
        <member name="T:STIL_NET.SendCommand.ErrorHandler">
            <summary>delagate for error event</summary>
        </member>
        <member name="T:STIL_NET.UploadFirmwareCtrl">
            <summary>Class upload firmware control</summary>
        </member>
        <member name="F:STIL_NET.UploadFirmwareCtrl._please_connect">
            <summary>String array for message box</summary>
        </member>
        <member name="F:STIL_NET.UploadFirmwareCtrl.progressThread">
            <summary>Thread of progress </summary>
        </member>
        <member name="M:STIL_NET.UploadFirmwareCtrl.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL_NET.UploadFirmwareCtrl.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:STIL_NET.UploadFirmwareCtrl.DoConnect">
            <summary>Thread process.</summary>
        </member>
        <member name="M:STIL_NET.UploadFirmwareCtrl.FuncProgressThread">
            <summary>Thread process.</summary>
        </member>
        <member name="M:STIL_NET.UploadFirmwareCtrl.DisplayGUI">
            <summary>Display control.</summary>
        </member>
        <member name="F:STIL_NET.UploadFirmwareCtrl.components">
            <summary>
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:STIL_NET.UploadFirmwareCtrl.Dispose(System.Boolean)">
            <summary>
            Nettoyage des ressources utilisées.
            </summary>
            <param name="disposing"><see langword="true"/> si les ressources managées doivent être supprimées ; sinon, false.</param>
        </member>
        <member name="M:STIL_NET.UploadFirmwareCtrl.InitializeComponent">
            <summary>
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="E:STIL_NET.UploadFirmwareCtrl.OnError">
            <summary>error event</summary>        
        </member>
        <member name="P:STIL_NET.UploadFirmwareCtrl.ProgressColor">
            <summary>
            Gets or sets the base color for the progress.
            </summary>
        </member>
        <member name="T:STIL_NET.UploadFirmwareCtrl.DisplayGUIHandler">
            <summary>delagate for display control</summary>
        </member>
        <member name="T:STIL_NET.UploadFirmwareCtrl.ErrorHandler">
            <summary>delagate for error event</summary>
        </member>
        <member name="T:STIL_NET.cUploadFirmwareParameters">
            <summary>Class upload firmware parameters .</summary>
        </member>
        <member name="M:STIL_NET.cUploadFirmwareParameters.IsValidParameters">
            <summary>Function to verify if the parameters are valid.</summary>
            <returns><see langword="false"/> if main or optional parameter file does not exist, <see langword="true"/> otherwise. </returns>
        </member>
        <member name="P:STIL_NET.cUploadFirmwareParameters.ExecuteSaveCommand">
            <summary>Property to see if the save command must be executed.</summary>
        </member>
        <member name="P:STIL_NET.cUploadFirmwareParameters.MainFile">
            <summary>Property for file name of main file parameters</summary>
        </member>
        <member name="P:STIL_NET.cUploadFirmwareParameters.OptionalFile">
            <summary>Property for file name of optional file parameters</summary>
        </member>
        <member name="P:STIL_NET.cUploadFirmwareParameters.ExtentionMainFile">
            <summary>Property for extention of main file parameters</summary>
        </member>
        <member name="P:STIL_NET.cUploadFirmwareParameters.ExtentionOptionalFile">
            <summary>Property for extention of optional file parameters</summary>
        </member>
        <member name="P:STIL_NET.cUploadFirmwareParameters.VisibleMainFile">
            <summary>Property for visibility of main file parameters</summary>
        </member>
        <member name="P:STIL_NET.cUploadFirmwareParameters.VisibleOptionalFile">
            <summary>Property for visibility of optional file parameters</summary>
        </member>
        <member name="P:STIL_NET.cUploadFirmwareParameters.SensorType">
            <summary>Property for sensor type parameters</summary>
        </member>
    </members>
</doc>
